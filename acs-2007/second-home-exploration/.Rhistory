z + b
z + a
"month<-" <- function (x, value){#
	a2 <- -(month(x) - value)#
	if (a2 == 0){#
		return(x)#
	} else if (a2 > 0){#
		month_seq <- seq(x, by = "month", length.out = a2 + 1)#
	} else { # adding negative months (subtracting)#
		a2 <- abs(a2)#
		month_seq <- seq(x, by = "-1 month", length.out = a2 + 1)#
	}#
	# partial months#
	secs <- as.double(difftime(month_seq[ceiling(a2) + 1], #
		month_seq[floor(a2) + 1], units = "secs"))#
	part <- a2 %% trunc(a2) * secs#
	#
	month_seq[a2 + 1] + part#
}
z + b
get("+.default")
get("+.Default")
get("+.generic")
get("+.Generic")
get("+.POSIXt")
get("+.numeric")
get("+.num")
get("+.difftime")
get("+")
get("*")
?setMethod
?signature
rm('+.POSIXt')
get('+.POSIXt')
setMethod('+', c("POSIXt", "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
z + a
z + b
setClass("duration",#
	representation(months = "numeric", seconds = "numeric"),#
)
setMethod('+', c("POSIXt", "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
z + a
setMethod('+', signature(z = "POSIXt", a = "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
>
z <- Sys.time()
class(z)
a <- new_duration(1, 86461)
a
class(a)
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}
class(a)
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
z + a
z
class(a)
a <- new_duration(1, 86461)
class(a)
-1 * a
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
z + a
?read.fwf
?strsplit
?trim
library(R.oo)
?trim
try <- "2     WHEN DID YOU SERVE?                     882 - 883"
strsplit(try, "  ")
trim(strsplit(try, "  "))
trim(strsplit(try, "  "))[[1]]
trim(strsplit(try, "  "))[1]
trim(strsplit(try, "  ")[1])
trim(strsplit(try, "  ")[[1]])
str(trim(strsplit(try, "  ")[[1]]))
trim(strsplit(try, "  ")[[1]])[1]
?is.na
library(xts)
install.package("xts")
install.packages("xts")
library(xts)
?xts
?classes(xts)
package?xts
package?zoo
library(zoo)
package?zoo
help(package = zoo)
help(package = xts)
?CLASS
CLASS
?xts
help(package = zoo)
library(its)
install.packages("its")
package?its
help(package = its)
?itsAccessor
?itsArith
?its
?itsTimes
library(ti)
install.packages("ti")
library(chron)
install.packages("chron")
library(chron)
package?chron
help(package = chron)
z <- Sys.time()
z
zz <- z + 60*60*20
zz
hour <- function(x) as.POSIXlt(x)$hour
am <- function(x) hour(x) < 12#
pm <- function(x) !am(x)
am(zz)
am(z)
zz <- z + 60*20
zz
am(zz)
hour(zz)
today <- Sys.Date
today
today()
today <- Sys.Date()
today
today + 2
z <- Sys.time()
zz <- z + 3600
zz
x <- zz - z
x
x + x
base::'+'(x, x)
base::'+.difftime'(x, x)
base::'+.POSIXt'(x, x)
class(x)
getMethods('+')
?MethodsList
findMethods('+')
showMethods('+')
getGenerics('+')
getGenerics(base::'+')
?Ops.difftime
Ops.difftime
Ops.difftime(x,x)
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
is.POSIXt
is.POSIXt <- function(x) inherits(x, "POSIXt")
is.duration <- function(x) inherits(x, "duration")
#
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}#
#
#
as.duration <- function (x, ...) UseMethod("as.duration")#
#
as.duration.data.frame <- function(x, ...){#
	stopifnot(dim(x) == c(1,2))#
	x <- structure(x, class = c("duration", "data.frame"))#
	x#
}#
#
as.duration.difftime <- function(x, ...){#
	new_duration(0, as.numeric(x, units = "secs"))#
}#
#
as.duration.default <- function(x, ...){#
	warning("Numeric coerced to seconds")#
	new_duration(0,x)#
}#
#
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)	#
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)#
#
y <- years(1)#
m <- months(1)#
d <- days(1)#
#
#
is.duration <- function(x) inherits(x, "duration")#
is.POSIXt <- function(x) inherits(x, "POSIXt")#
#
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}	#
#
add_duration_to_date <- function(date, dur) {#
	second(date) <- second(date) + dur$seconds#
	month(date) <- month(date) + dur$months#
	date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
'+.Generic'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		.Generic <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
		'.Generic' <- '+'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		'.Generic' <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
rm('.Generic,)
'
>
rm('.Generic')
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
x + x
base::'+'(x,x)
rm('+.duration')
base::'+'(x,x)
?options
traceback()
recover()
options(error = recover)
1
c
list.files
list.files()
try
base::try
rm(try)
try
return <- function(x) x
shomes2006 <- read.csv("shomes2006.csv", header = T)
head(shomes2006)
dim(shomes2006)
library(ggplot2)
qplot(data = shomes2006, per_owner, change)
qplot(data = shomes2006, per_owner, hpi)
qplot(data = shomes2006, per_owner, max_hpi)
qplot(data = shomes2006, per_owner, max_hpi, colour = state)
qplot(data = shomes2006, change, max_hpi, colour = state)
shomes2006$per_change <- with(shomes2006, change / max_hpi)
qplot(data = shomes2006, per_change, max_hpi, colour = state)
qplot(data = shomes2006, per_change, max_hpi, colour = state, label = state)
qplot(data = shomes2006, per_change, max_hpi, colour = state, geom = "text", label = state)
qplot(data = shomes2006, max_hpi, per_change, colour = state, geom = "text", label = state)
qplot(data = shomes2006, max_hpi, per_change, colour = state, geom = "text", label = state) + opts(legend.position = none)
qplot(data = shomes2006, max_hpi, per_change, colour = state, geom = "text", label = state) + opts(legend.position = "none")
head(hpi)
hpi <- read.csv(file.choose(), header = T)
hpi$time <- hpi$year + hpi$quarter/4#
hpi <- na.omit(hpi)#
get_max <- function(df){#
	max_hpi <- max(df$hpi)#
	time <- df[df$hpi == max_hpi, 8]#
	change <- df[df$year == 2009, 6] - max_hpi#
	c(city = df$city[1],#
		state = df$state[1],#
		max_hpi = max_hpi,#
		max_time = time)}#
		,#
		change = change)#
}
get_max <- function(df){#
	hpi2009 <- df$hpi[df$time == 2009]#
	df <- df[df$hpi == max(df$hpi),]#
	df$change <- hpi2009 - df$hpi#
	df#
}
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"
head(maxhpi)
maxhpi$rate <- with(maxhpi,change/time)
maxhpi <- within(maxhpi, per_change <- change/hpi,#
						per_rate <- per_change/rate)
head(maxhpi)
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
outcome
maxhpi <- within(maxhpi, per_rate <- per_change/rate)
head(maxhpi)
qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
outcome <- qplot(data = maxhpi, hpi, rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
outcome
maxhpi$rate <- with(maxhpi,change/(2009 -time))
maxhpi <- within(maxhpi, per_rate <- per_change/rate)
head(maxhpi)
maxhpi <- within(maxhpi, per_rate <- per_change/(2009 - time))
head(maxhpi)
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
outcome
maxhpi <- within(maxhpi, per_rate <- rate / hpi)
qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
savePlot(outcome)
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
savePlot(outcome)
outcome
savePlot(outcome)
summary(maxhpi)
summary(maxhpi$time)
unique(maxhpi$time)
maxhpi$rate <- with(maxhpi,change/(2009.25 - time))#
maxhpi <- within(maxhpi, per_change <- change/hpi)#
maxhpi <- within(maxhpi, per_rate <- rate / hpi)
#
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state) + opts(legend.position = "none")
outcome
qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state, title = "Max HPI vs. outcome", ylab = "rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")
outcome
?gsub
library(Roo)
library(R.oo)
for (i in 1:nrow(maxhpi))#
	maxhpi$state[i] <- trim(gsub("MSAD", "", maxhpi$state[i]))#
}
?trim
str(maxhpi)
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"
maxhpi <- with(maxhpi, state <- as.numeric(state))
str(maxhpi)
head(maxhpi)
head(hpi)
get_max <- function(df){#
	hpi2009 <- df$hpi[df$time == 2009]#
	df <- df[df$hpi == max(df$hpi),]#
	df$change <- hpi2009 - df$hpi#
	df#
} #
#
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"
head(maxhpi)
maxhpi$rate <- with(maxhpi,change/(2009.25 - time))
maxhpi <- within(maxhpi, per_change <- change/hpi)#
maxhpi <- within(maxhpi, per_rate <- rate / hpi)
head(maxhpi)
maxhpi <- within(maxhpi, state <- as.numeric(state))
head(maxhpi)
str(maxhpi)
maxhpi <- within(maxhpi, state <- as.character(state))
str(maxhpi)
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"
maxhpi$rate <- with(maxhpi,change/(2009.25 - time))#
maxhpi <- within(maxhpi, per_change <- change/hpi)#
maxhpi <- within(maxhpi, per_rate <- rate / hpi)#
maxhpi <- within(maxhpi, state <- as.character(state))
str(maxhpi)
for (i in 1:nrow(maxhpi))#
	maxhpi$state[i] <- trim(gsub("MSAD", "", maxhpi$state[i]))#
}
str(maxhpi)
qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")
outcome
savePlot(outcome)
traceback()
ggsave(file="exports/outcome-by-max-price.pdf", width=8, height=6)
