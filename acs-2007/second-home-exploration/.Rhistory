d
z <- now()
source("util.r")
z <- now()
y <- now()
z
y
z-y
dt <- z - y
dt
dt + dt
dt * 10
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}	#
#
add_duration_to_date <- function(date, dur) {#
	second(date) <- second(date) + dur$seconds#
	month(date) <- month(date) + dur$months#
	date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}
dt + dt
rm("+.difftime")
"+.duration" <- "+.POSIXt" <-  function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
dt + dt
y + dt
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		base::Ops.difftime#
	else {#
		base::'+'(e1, e2)#
	}#
}
dt + dt
is.difftime <- function(x) inherits(x, "difftime")
is.difftime(dt)
dt + dt
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		base::Ops.difftime(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
dt + dt
z + y
y
z + m
y + dt
m + dt
base::'+.POSIXt'(z,y)
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		base::Ops.difftime(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else {#
		base::'+'(e1, e2)#
	}#
}
z + y
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		base::Ops.difftime(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
z + 1
z
1 + z
z + dt
dt = z
dt <- z - y
dt + z
1 + 2
z + 60*60*24*31
z + 60*60*24*31 - z
?difftime
?as.difftime
?as.difftime(d)
d
as.difftime(d)
as.difftime
as.difftime <- function(...) UseMethod("as.difftime")
as.difftime(d)
rm(as.difftime)
as.difftime.default <- function(...) as.difftime(...)
as.difftime <- function(...) UseMethod("as.difftime")
rm(as.difftime)
as.difftime <- function(...) UseMethod("as.difftime")
as.difftime(d)
class(d$seconds)
as.difftime.duration <- function(dur,...) {#
	if (dur$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
	as.difftime(dur$seconds)#
}
as.difftime(d)
traceback()
rm(as.difftime)
as.difftime
as.difftime(d)
as.difftime <- function(...) UseMethod("as.difftime")#
as.difftime.default <- function(...) base::as.difftime(...)#
as.difftime.duration <- function(dur,...) {#
	if (dur$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
	as.difftime(dur$seconds)#
}
as.difftime(d)
as.difftime <- function(tim, format = "%X", units = "auto") UseMethod("as.difftime")#
as.difftime.default <- function(...) base::as.difftime(...)#
as.difftime.duration <- function(dur,...) {#
	if (dur$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
	as.difftime(dur$seconds)#
}
as.difftime(d)
as.difftime <- function(tim, format = "%X", units = "auto") UseMethod("as.difftime")#
as.difftime.default <- function(tim, format, units) base::as.difftime(tim, format, units)#
as.difftime.duration <- function(tim, format, units) {#
	if (tim$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
	as.difftime(tim$seconds, format, units)#
}
as.difftime(d)
traceback()
base::as.difftime
as.difftime.duration <- function(tim, format, units) {#
	if (tim$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
	as.difftime(tim$seconds, format, units = "secs")#
}
as.difftime(d)
as.difftime(d) -> diff
diff
as.difftime(diff)
base::as.difftime(diff)
?UseMethod
rm(as.difftime)
class(dt)
units(dt)
dt
difftime(z, z + 3600)
difftime(z + 3600, z) -> k
units(k)
as.numeric(k)
as.numeric(k, units = "secs")
	str(d$seconds, units = "secs", class = "difftime")
d
d$seconds
	str(d$seconds, units = "secs", class = "difftime")
	class(str(d$seconds, units = "secs", class = "difftime"))
	structure(d$seconds, units = "secs", class = "difftime")
difftime(86400, units = "secs")
as.difftime
as.difftime(structure(d$seconds, units = "secs", class = "difftime"))
Ops.difftime
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else if (is.difftime(e1) && is.difftime(e2)){#
		diff <- structure(as.numeric(e1, units = "secs") + as.numeric(e2, units = "secs"), units ="secs", class = "difftime")#
		temp <- now()#
		difftime(temp + diff, temp)}#
	else {#
		base::'+'(e1, e2)#
	}#
}
dt
dt + dt
k
k + k
difftime(k)
difftime
unclass(z)
is.na(unclass(z))
?all
?is.na(z)
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else if (is.difftime(e1) && is.difftime(e2)){#
		z <- as.numeric(e1, units = "secs") + as.numeric(e2, units = "secs")#
		if (all(is.na(z))) #
            units <- "secs"#
        else {#
            zz <- min(abs(z), na.rm = TRUE)#
            if (is.na(zz) || zz < 60) #
                units <- "secs"#
            else if (zz < 3600) #
                units <- "mins"#
            else if (zz < 86400) #
                units <- "hours"#
            else units <- "days"#
        }#
    #
		switch(units, secs = structure(z, units = "secs", class = "difftime"), #
			mins = structure(z/60, units = "mins", class = "difftime"), #
			hours = structure(z/3600, units = "hours", class = "difftime"), #
			days = structure(z/86400, units = "days", class = "difftime"), #
			weeks = structure(z/(7 * 86400), units = "weeks", class = "difftime"))#
	}#
#
	else #
		base::'+'(e1, e2)#
	#
}
dt = dt
dt + dt
k + k
as.numeric(k, units = "secs")
as.numeric(k, units = "secs") +  as.numeric(k, units = "secs")
as.numeric(k, units = "secs") +  as.numeric(k, units = "secs") -> q
q
is.na(q)
abs(q)
min(abs(q))
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else if (is.difftime(e1) && is.difftime(e2)){#
		diff <- as.numeric(e1, units = "secs") + as.numeric(e2, units = "secs")#
        if (is.na(diff) || diff < 60) #
        	units <- "secs"#
        else if (diff < 3600)#
        	units <- "mins"#
        else if (diff < 86400)#
        	units <- "hours"#
        else units <- "days"#
    #
    switch(units, secs = structure(diff, units = "secs", class = "difftime"), #
		mins = structure(diff/60, units = "mins", class = "difftime"), #
		hours = structure(diff/3600, units = "hours", class = "difftime"), #
		days = structure(diff/86400, units = "days", class = "difftime"), #
		weeks = structure(diff/(7 * 86400), units = "weeks", class = "difftime"))#
	}#
#
	else #
		base::'+'(e1, e2)#
	#
}
k + k
dt + dt
k + 1
make_difftime <- function (dur) {#
	if (dur$months != 0)#
		stop("difftime does not support non-uniform durations (months)")#
    if (dur$seconds < 60) #
        units <- "secs"#
    else if (dur$seconds < 3600)#
        units <- "mins"#
    else if (dur$seconds < 86400)#
        units <- "hours"#
    else units <- "days"#
    #
    switch(units, secs = structure(dur$seconds, units = "secs", class = "difftime"), #
		mins = structure(dur$seconds/60, units = "mins", class = "difftime"), #
		hours = structure(dur$seconds/3600, units = "hours", class = "difftime"), #
		days = structure(dur$seconds/86400, units = "days", class = "difftime"), #
		weeks = structure(dur$seconds/(7 * 86400), units = "weeks", class = "difftime"))#
}
make_difftime(d)
d
y <- years(1)#
m <- months(1)#
d <- days(1)
make_difftime(m)
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)	#
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)
make_diff(hours(3))
make_difftime(hours(3))
make_difftime(hours(3.5))
make_difftime(hours(3.5) + minutes(2))
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		make_difftime(as.duration(e1) + as.duration(e2))#
	else if (is.difftime(e1))#
		make_difftime(as.duration(e1) + e2)#
	else if (is.difftime(e2))#
		make_difftime(as.duration(e2) + e1)#
	else #
		base::'+'(e1, e2)#
	#
}
k + k
k + k
k + dt
dt
dt + dt
k + 1
as.duration.default <- function(x, ...){#
	message("Numeric coerced to seconds")#
	new_duration(0,x)#
}
k + 1
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else if (is.POSIXt(e1) && is.POSIXt(e2))#
		stop("binary '+' is not defined for \"POSIXt\" objects")#
	else if (is.POSIXt(e1) || is.POSIXt(e2))#
		base::'+.POSIXt'(e1,e2)#
	else if (is.difftime(e1) && is.difftime(e2))#
		make_difftime(as.duration(e1) + as.duration(e2))#
	else if (is.difftime(e1)){#
		e2 <- structure(e2, units = units(e1), class = "difftime")#
		make_difftime(as.duration(e1) + e2)#
	}#
	else if (is.difftime(e2)){#
		e1 <- structure(e1, units = units(e2), class = "difftime")#
		make_difftime(as.duration(e2) + e1)#
	}#
	else #
		base::'+'(e1, e2)#
	#
}
k + 1
k
k + dt + 1
k + 1 + dt
rm('+.difftime')
k + 1
k + 1 + dt
7189.945 / 3600
k + dt + 1
3590.945 / 3600
vars <- read.csv("../csv-pus/ss07pusa.csv", nrows = 1)
vars <- read.csv("..\csv-pus\ss07pusa.csv", nrows = 1)
vars <- read.csv("../csv_pus/ss07pusa.csv", nrows = 1)
sh_vars <- c("ST", "PUMA", "VACS", "TEN")
sh_vars
of_interest <- names(vars) %in% mig_vars
of_interest <- names(vars) %in% sh_vars
dim(of_interest)
of_interest
sum(of_interest)
vars[4:5]
vars
vars2 <- read.csv("../csv_pus/ss07pusb.csv", nrows = 1)
length(vars2)
vars2
vars <- read.csv("../csv_pus/ss07husa.csv", nrows = 1)
vars <- read.csv("../csv_hus/ss07husa.csv", nrows = 1)
of_interest <- names(vars) %in% sh_vars
sum(of_interest)
col_classes <- c("NULL", NA)[of_interest + 1]
dim(col_classes)
str(col_classes)
sh_a <- read.csv("../csv_hus/ss07husa.csv", colClasses = col_classes)
city <- read.csv("location-database.csv", header = T)
city <- read.csv("location_database.csv", header = T)
head(city)
sh_a <- subset(sh_a, !is.na(TEN))
sh_b <- read.csv("../csv_hus/ss07husb.csv", colClasses = col_classes)
sh_b <- subset(sh_b, !is.na(TEN))
dim(sh_a)
dim(sh_b)
sh <- rbind(sh_a, sh_b)[sh_vars]#
names(sh) <- c("fips_st", "fips_puma", "vac_status", "tenure")#
rm(sh_a)#
rm(sh_b)
dim(sh)
test <- head(sh)
test
try <- test[do.call("order", test),]
try
?rle
z <- c(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,TRUE,TRUE)#
rle(z)#
rle(as.character(z))
test[order(test$tenure),]
length(unique(fips_puma))
length(unique(sh$fips_puma))
length(table(sh$fips_puma, sh$fips_st))
table(sh$fips_puma, sh$fips_st)
length(table(sh$fips_puma, sh$fips_st) > 0)
sum(table(sh$fips_puma, sh$fips_st) > 0)
a <- rep(1:10, floor(runif(10, max = 6)))
a
table(a
)
a <- as.factor(a)
a
levels(a) <- 1:10
a
print(a)
a <- as.factor(a)
a
levels(a) <- unique(a)
a <- as.factor(rep(1:10, floor(runif(10, max = 6))))
a
pos <- 1:10
levels(a) <- c(levels(a), pos[! pos %in% levels(a)])
levels(a)
a
table(a)
a <- factor(a, levels = pos)
a
?ddply
get_info <- function(df)#
	c(owner = sum( c(sum(df$tenure == "1"), sum(df$tenure == "2"))), total = nrow(df))
a <- ddply(test, c("fips_st","fips_puma"), summarize, get_info, .progress = "text")
library(plyr)
a <- ddply(test, c("fips_st","fips_puma"), summarize, get_info, .progress = "text")
get_info <- function(df)#
	c(owner_occ = sum( c(sum(df$tenure == "1"), sum(df$tenure == "2"))), total = nrow(df))
a <- ddply(test, .(fips_st,fips_puma), get_info, .progress = "text")
a
test
shomes <- ddply(sh, .(fips_st,fips_puma), get_info, .progress = "text")
dim(shomes)
head(shomes)
shomes$owner_per <- with(shomes, owner_occ / total * 100)
head(shomes)
shomes$owner_per <- NULL
get_info <- function(df)#
	c(owner_occ = sum( c(sum(df$tenure == "1"), sum(df$tenure == "2"))), total = nrow(df), per_seasonal = sum(df$vac_status == 5)/sum(na.omit(df$vac_status)))
shomes <- ddply(sh, .(fips_st,fips_puma), get_info, .progress = "text")
shomes$per_owner <- with(shomes, owner_occ / total * 100)
head(shomes)
summary(shomes)
summary(sh)
head(shomes)
rm(sh)
head(shomes)
shomes$per_seasonal <- NULL
head(shomes)
write.table(shomes, "data/shomes2007.csv", row = F, sep = ",")
write.table(shomes, "data/shomes2007.csv", row = F, sep = ",")
