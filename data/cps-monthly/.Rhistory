x + x
y + x
1 + 2
z = y
z
z <- Sys.time()
z + y
source("accessors.r")
z + y
y$months
month(z)
7 + 12
z <- date
z
z <- Sys.time()
date <- z
dur <- y
month(date) + dur$months
source("accessors.r")
z + y
z
x + x
x + y
y + x
# subtracting #
"-.duration" <- "-.POSIXt" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	# subtraction#
	if (!is.POSIXt(e1)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else {#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
  }#
}
y - m
z - m
warnings()
e1 <- z
e2 <- m
missing(e2) && is.duration(e1)
!is.POSIXt(e1)
!is.POSIXt(e2)
if (!is.POSIXt(e2)) e2 <- as.duration(e2)
is.duration(e1) && is.POSIXt(e2)
is.POSIXt(e1) && is.duration(e2)
e1 + -e2
traceback()
-e2
y - m
n <- -y
n
z + n
recover()
traceback()
e2$seconds
second(e1)
date <- e2
dur <- e2
date <- e1
second(date) + dur$seconds
	second(date) <- second(date) + dur$seconds
traceback()
e1
e2
second(date) + dur$seconds
class(second(date) + dur$seconds)
second(date) + dur$seconds -> value
class(value)
# subtracting #
"-.duration" <- "-.POSIXt" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else {#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
  }#
}
z - m
m
z
e1
e2
!is.POSIXt(e1) && is.duration(e2)
!is.POSIXt(e2) && is.duration(e1)
is.duration(e1) && is.POSIXt(e2)
is.POSIXt(e1) && is.duration(e2)
e1 + -e2
z - m
traceback()
"-.duration" <- "-.POSIXt" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else {#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
  }#
}
z - m
y - m
d - m
x
d - x
base::'+.POSIXt'
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else if (is.POSIXt(e1)){#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
	} else#
		base::'-'(e1, e2)#
}
base::'-.POSIXt'
x - x
d - x
traceback()
e1 <- d
e2 <- x
missing(e2) && is.duration(e1)
!is.POSIXt(e1) && is.duration(e2)
!is.POSIXt(e2) && is.duration(e1)
e2 <- as.duration(e2)
e2
class(e2)
is.duration(e1) && is.POSIXt(e2)
is.POSIXt(e1) && is.duration(e2)
is.duration(e1) && is.duration(e2)
e1 + -e2
traceback()
-e2
traceback()
e2
e1 <- e2
rm(e2)
missing(e2) && is.duration(e1)
e1$seconds
-e1$seconds
class(e1$seconds)
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	if (missing(e2)) base::'-'(e1, e2)#
	#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else if (is.POSIXt(e1)){#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
	} else#
		base::'-'(e1, e2)#
}
d - x
traceback()
e2
e1
e1$seconds
is.duration(e1$seconds)
try <- e1$seconds
class(try)
is.duration(try)
-try
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	if (missing(e2)) base::'-'(e1)#
	#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else if (is.POSIXt(e1)){#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
	} else#
		base::'-'(e1, e2)#
}
d - x
traceback()
-try
traceback()
base::'-'(2,1)
base::'-'(1)
base::'-'(try)
traceback()
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e1) && is.duration(e2)) {#
		e2$seconds <- -e2$seconds#
		e2$months <-  -e2$months#
		return (e2)#
	}#
	if (missing(e2)) base::'-'(e1)#
	#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else if (is.POSIXt(e1)){#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
	} else#
		base::'-'(e1, e2)#
}
-try
traceback()
is.duration(try)
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e1) && is.duration(e2)) {#
		e2$seconds <- -e2$seconds#
		e2$months <-  -e2$months#
		return (e2)#
	}#
	if (missing(e2)) base::'-'(e1)#
	print("hi")
}
-try
test <- function (x){#
	if(!is.na(x)) base::'-'(x)#
	print("hi")#
	}
test(1)
test(NA)
test <- function (x){#
	if(!is.na(x)) base::'-'(x)#
	else print("hi")#
	}
test(1)
test(NA)
test <- function (x){#
	if(!is.na(x)) return(base::'-'(x))#
	print("hi")#
	}
test(1)
test(50 - 3 * 4)
"-.duration" <- "-.POSIXt" <- "-" <- function(e1, e2){#
	# Deal with unary minus, e.g. -hours(1)#
	if (missing(e2) && is.duration(e1)) {#
		e1$seconds <- -e1$seconds#
		e1$months <-  -e1$months#
		return (e1)#
	}#
	if (missing(e2)) return(base::'-'(e1))#
	#
	# subtraction#
	if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.POSIXt(e2)) #
    	stop("Cannot subtract POSIXt from a duration")#
  	if (is.POSIXt(e1) && is.duration(e2)) #
  		e1 + -e2 #
  	else if (is.duration(e1) && is.duration(e2))#
  		e1 + -e2#
  	else if (is.POSIXt(e1)){#
	    coerceTimeUnit <- function(x) {#
        	switch(attr(x, "units"), secs = x, mins = 60 * x, hours = 60 * #
            	60 * x, days = 60 * 60 * 24 * x, weeks = 60 * 60 * #
            	24 * 7 * x)#
        }#
        if (!inherits(e1, "POSIXt")) #
        	stop("Can only subtract from POSIXt objects")#
    	if (nargs() == 1) #
        	stop("unary '-' is not defined for \"POSIXt\" objects")#
    	if (inherits(e2, "POSIXt")) #
        	return(as.duration(difftime(e1, e2)))#
    	if (inherits(e2, "difftime")) #
        	e2 <- unclass(coerceTimeUnit(e2))#
    	if (!is.null(attr(e2, "class"))) #
        	stop("can only subtract numbers from POSIXt objects")#
    	structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
	} else#
		base::'-'(e1, e2)#
}
-try
d - x
z - x
z
z - d
m - d
d - m
2 -1
-d
-z
traceback()
rm("-.POSIXt")
z - d
z
z - x
d - x
-z
(z + 3600) - z
zz -z
(z + 3600) - z
traceback()
rm("+.POSIXt")
(z + 3600) - z
z + z
d + 1
?strptime
x <- 030406
strptime(x, "%y%m%d")
strptime(x, "%Y%m%d")
strptime(x, format = "%Y%m%d")
strptime(x, format = "%y%m%d")
strptime(x, %y%m%d)
x <- as.character(x0
>
>
x <- as.character(x)
x
strptime(x, format = "%y%m%d")
strptime(x, %y%m%d)
strptime(x, "%y%m%d")
strptime(x, format = "%Y%m%d")
strptime(x, "%Y%m%d")
x
x <- "030406"
strptime(x, format = "%Y%m%d")
strptime(x, format = "%y%m%d")
strptime(x, "%y%m%d")
x <- "20030406"
strptime(x, "%y%m%d")
strptime(x, "%Y%m%d")
x <- "20030406%"
strptime(x, "%Y%m%d%")
strptime(x, "%y%m%d%")
strptime(x, "%y%m%d")
strptime(x, "%Y%m%d")
strptime(x, "%Y%m%d\%")
x <- "20030406#"
cat("#")
strptime(x, "%Y%m%d#")
strptime(x, "%y%m%d#")
formats <- c("%Y", "%m", "%d")
permute <- function(...){#
	data <- unlist(list(...))#
#
	# Creates grid of all unique combinations of data elements with #
	# length = length(data). 	#
	perms <- splat(expand.grid)(rep(list(seq_along(data)), length(data)))#
	#
	# Retains only combinations that use each element once#
	# (These are the permutations)#
	perms <- perms[apply(perms, 1, function(x) nlevels(as.factor(x))) == length(data), ]#
	#
	# Replaces each element with its value from data#
	perm_strings <- sapply(perms, function(x) data[x])#
	perm_strings#
}
class(permute(formats))
library(plyr)
class(permute(formats))
formats <- list(formats, c("%y", "%m", "%d"))
formats
rbind(formats[[1]], formats[[2]])
class(rbind(formats[[1]], formats[[2]]))
source("2-extract.r")
vars_that_I_want <- c("gtco", "gestfips", "PEMLR", "GTCBSA", "PRDTIND1", "PRMJIND1")#
#
all_vars <- read.csv("variables.csv", header = TRUE, stringsAsFactors = FALSE)#
#
to_extract <- all_vars[all_vars$abbr %in% vars_that_I_want,]#
#
parse_line <- function(line, fields) {#
  substring(line, fields$start, fields$start + fields$length - 1)  #
}#
#
parse_month <- function(year, month) {#
	path <- paste("raw/", year, "-", sprintf("%02i", month), ".txt.gz", sep = "")#
	out_path <- paste("clean/", year, "-", sprintf("%02i", month), ".csv.gz", sep = "")#
	#
	#
	if (!file.exists(path)) return() # Skip if file doesn't exist#
	if (file.exists(out_path)) return() # Skip if already processed#
	#
	message("Processing ", path)#
	lines <- readLines(gzfile(path))#
	closeAllConnections()#
#
	to_find <- to_extract[to_extract$year == year & to_extract$month == month,]#
	#
	parsed <- llply(lines, parse_line, fields = to_find, .progress = "text")#
#
	  # Convert to data frame#
	out <- do.call("rbind", parsed)#
	outdf <- as.data.frame(alply(out, 2, type.convert))#
	names(outdf) <- tolower(to_find$abbr)#
	outdf$year <- year#
	outdf$month <- month#
	#
	# Save as compressed csv file#
	write.table(outdf, gzfile(out_path), sep = ",", row = F)#
	closeAllConnections()#
}
all_months <- expand.grid(#
  year = 2000:2009,#
  month = 1:12)
m_ply(all_months, parse_month)
m_ply(all_months, parse_month)
traceback()
all_months <- expand.grid(#
  year = 2000:2009,#
  month = 1:12)[-1]
all_months
all_months <- expand.grid(#
  year = 2000:2009,#
  month = 1:12)[-1,]
all_months
m_ply(all_months, parse_month)
vars_that_I_want <- c("gtco", "gestfips", "PEMLR", "GTCBSA", "PRDTIND1", "PRMJIND1")
vars_that_I_want
all_vars <- read.csv("variables.csv", header = TRUE, stringsAsFactors = FALSE)
to_extract <- all_vars[all_vars$abbr %in% vars_that_I_want,]
to_extract
	to_find <- to_extract[to_extract$year == 2000 & to_extract$month == 1,]
to_find
	to_find <- to_extract[to_extract$year == 2000 & to_extract$month == 2,]
to_find
summary(all_vars)
head(all_vars)
all_months <- expand.grid(#
  year = 2003:2009,#
  month = 1:12)
m_ply(all_months, parse_month)
msa_pop <- read.csv("population_by_MSA.csv", header = T)
msa_pop <- read.csv("population_by_MSA.csv", header = T)
head(msa_pop)
msa_pop <- msa_pop[,c(1:16, 53:64)]
head(msa_pop)
dim(msa_pop)
msa_pop <- msa_pop[,c(1:25)]
head(msa_pop)
msa_pop <- msa_pop[-c(1:3),]
head(msa_pop)
msas <-msa_pop[msa_pop$LSAD == "Metropolitan Statistical Area",]
dim(msas)
head(msas)
make_merced <- function (df) {#
	path <- paste("clean/", df$year, "-", sprintf("%02i", df$month), ".csv.gz", sep = "")#
	#
	message("Processing ", path)#
	df <- read.csv(gzfile(path), header = T)#
	closeAllConnections()#
	#
	new <- df[df$gtco == 047 & df$gestfips == 06,]#
	new#
}#
#
all_months <- expand.grid(#
  year = 2000:2009,#
  month = 1:12#
)[-c(1, 7, 13, 19, 30, 36, 42, 48, 54, 60, 66, 72),]#
#
merced <- ddply(all_months, .(year, month), make_merced)#
#
write.table(merced, "merced_data.csv", sep = ",", row = F)
