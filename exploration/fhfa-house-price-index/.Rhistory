attr(date2, "tzone") <- "EST"
date2
class(date2)
tz(date2)
tz(date2, supply = T)
"tz<-" <- function(x, value) {#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
"year<-" <- function(x, value) {#
  ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x, supply = T))#
}
"month<-" <- function(x, value) {#
  # Seconds approach no longer applies: months are not uniformly long#
#
  ISOdatetime(#
    year(x) + (value - 1) %/% 12,  # New month values > 12 also change the year#
    #
    # %% is the modulo operator in R#
    (value - 1) %% 12 + 1, #
    mday(x), #
    hour(x), #
    minute(x), #
    second(x), #
    tz(x, supply = T))#
}
update.Date(date, year = 2010, month = 1, mday = 1)
'year<-'(date, 2010)
update.Date(date, year = 2010, mday = 1)
update.Date(date, year = 2010)
update.Date <- update.POSIXt <- function(object, ...) {#
#
  # a list of the changes we wish to make#
  todo <- list(...)#
  #
  # ordering to do list#
  changes <- as.list(c(year = todo$year, #
    month = todo$month, #
    week = todo$week, #
    yday = todo$yday,#
    wday = todo$wday,#
    mday = todo$mday, #
    hour = todo$hour, #
    minute = todo$minute, #
    second = todo$second,#
    tz = todo$tz))  #
    #
  for(change in names(changes)) {#
#
    # for each change, we select the function we will need to use#
    f <- match.fun(paste(change, "<-", sep = ""))#
    #
    # we update the date with the new change#
    object <- f(object, changes[[change]])#
  }#
  object#
}
update.Date(date, year = 2010)
update.Date(date, year = 2010, month = 1, mday = 1)
traceback()
tz <- function(x, supply = F) {#
    if (supply){#
        if (is.null(attr(as.POSIXlt(x),"tzone")))#
            return("")#
        if (is.na(attr(as.POSIXlt(x),"tzone")[1]))#
            return("")#
    }#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}
update.Date(date, year = 2010, month = 1, mday = 1)
tz(date)
update.Date(date2, year = 2010, month = 1, mday = 1)
?na.rm
?sum
update.Date(date, year =2010, month = 13, mday = 1)
update.date(date, yday = 54, wday = 10, mday = 3)
update.Date(date, yday = 54, wday = 10, mday = 3)
daye
date
update.Date(date, yday = 35, wday = 10, mday = 3)
update.Date(date, min = 35 = 10, sec = 3)
update.Date(date, min = 10, sec = 3)
update.Date(date, minute = 10, second = 3)
decimal_date(date)
new_duration <- function (months, seconds){#
  structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}#
#
as.duration <- function (x, ...) UseMethod("as.duration")#
#
as.duration.data.frame <- function(x, ...) {#
  stopifnot(identical(sort(colnames(x)), c("months", "seconds")))#
  x <- structure(x, class = c("duration", "data.frame"))#
  x#
}#
#
as.duration.difftime <- function(x, ...){#
  new_duration(0, as.numeric(x, units = "secs"))#
}#
#
as.duration.default <- function(x, ...){#
  message("Numeric coerced to seconds")#
  new_duration(0,x)#
}#
as.duration.duration <- function(x, ...) {#
  x#
}#
#
as.data.frame.duration <- function(x, optional = TRUE, ...) {#
  stop("Currently, durations can not be stored in a data frame", #
    call. = FALSE)#
}#
#
#
c.duration <- function(...) {#
  structure(do.call(rbind, list(...)), class = c("duration", "data.frame"))#
}#
#
#
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)  #
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)#
#
y <- years(1)#
m <- months(1)#
w <- weeks(7)#
d <- days(1)#
#
#
is.duration <- function(x) inherits(x, "duration")#
is.POSIXt <- function(x) inherits(x, c("POSIXt", "POSIXct", "POSIXlt"))#
is.difftime <- function(x) inherits(x, "difftime")#
#
# for expanding arguments within operations#
#
get_length <- function(x) {#
	if(is.data.frame(x)) #
    	nrow(x)#
    else if (inherits(x, "POSIXlt"))#
    	length(x) / 9#
    else#
    	length(x)#
}#
  #
expand <- function(obj, sml, big){#
  if (big %% sml != 0) #
    stop("longer object length is not a multiple of shorter object length", call. = F)#
  seq <- rep(seq_len(sml), length = big)#
    #
  if (length(dim(obj)) == 2) {#
    obj[seq, , drop = FALSE]#
  } else {#
    obj[seq]#
  }#
    #
}#
#
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
  # accounting for different lengths#
  n1 <- get_length(e1)#
  n2 <- get_length(e2)#
#
  #
#
  if (n1 < n2)#
    e1 <- expand(e1, n1, n2)#
  else if (n1 > n2)#
    e2 <- expand(e2, n2, n1)#
  #
  if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
  if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
  if (is.duration(e1) && is.duration(e2)) #
    add_duration_to_duration(e1, e2)#
  else if (is.duration(e1) && is.POSIXt(e2))#
    add_duration_to_date(e2, e1)#
  else if (is.duration(e2) && is.POSIXt(e1)) #
    add_duration_to_date(e1, e2)#
  else if (is.POSIXt(e1) && is.POSIXt(e2))#
    stop("binary '+' is not defined for \"POSIXt\" objects")#
  else if (is.POSIXt(e1) || is.POSIXt(e2))#
    base::'+.POSIXt'(e1,e2)#
  else if (is.difftime(e1) && is.difftime(e2))#
    make_difftime(as.duration(e1) + as.duration(e2))#
  else if (is.difftime(e1)){#
    e2 <- structure(e2, units = units(e1), class = "difftime")#
    make_difftime(as.duration(e1) + e2)#
  }#
  else if (is.difftime(e2)){#
    e1 <- structure(e1, units = units(e2), class = "difftime")#
    make_difftime(as.duration(e2) + e1)#
  }#
  else #
    base::'+'(e1, e2)#
  #
}  #
#
add_duration_to_date <- function(date, dur) {#
  second(date) <- second(date) + dur$seconds#
  month(date) <- month(date) + dur$months#
  date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}#
#
make_difftime <- function (dur) {#
  if (dur$months != 0)#
    stop("difftime does not support non-uniform durations (months)")#
    #
  if (dur$seconds >= 0) seconds <- dur$seconds#
  else seconds <- -dur$seconds#
  #
    if (seconds < 60) #
        units <- "secs"#
    else if (seconds < 3600)#
        units <- "mins"#
    else if (seconds < 86400)#
        units <- "hours"#
    else units <- "days"#
    #
    switch(units, secs = structure(dur$seconds, units = "secs", class = "difftime"), #
    mins = structure(dur$seconds/60, units = "mins", class = "difftime"), #
    hours = structure(dur$seconds/3600, units = "hours", class = "difftime"), #
    days = structure(dur$seconds/86400, units = "days", class = "difftime"), #
    weeks = structure(dur$seconds/(7 * 86400), units = "weeks", class = "difftime"))#
}#
#
#
"*.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    multiply_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    multiply_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
# multiply_duration_by_numeric <- function(num, dur){#
#  as.duration(num * as.data.frame(dur))#
# }#
#
multiply_duration_by_numeric <- function(num, dur){#
  as.duration(num * structure(dur, class = "data.frame"))#
}#
#
"/.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    divide_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    divide_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
# divide_duration_by_numeric <- function(num, dur){#
#  as.duration(as.data.frame(dur)/num)#
# }#
divide_duration_by_numeric <- function(num, dur){#
  as.duration(structure(dur, class = "data.frame")/num)#
}#
#
#
# subtracting #
"-.duration" <- "-.POSIXt" <- "-.difftime" <- function(e1, e2){#
  # Deal with unary minus, e.g. -hours(1)#
  if (missing(e2) && is.duration(e1)) {#
    e1$seconds <- -e1$seconds#
    e1$months <-  -e1$months#
    return (e1)#
  }#
  if (missing(e2) && is.POSIXt(e1))#
    stop("unary '-' is not defined for \"POSIXt\" objects")#
  if (missing(e2) && is.difftime(e1))#
    return(make_difftime(-as.duration(e1)))#
  if (missing(e2)) #
  	return(base::'-'(e1))#
  #
  #
  # accounting for different lengths#
  n1 <- get_length(e1)#
  n2 <- get_length(e2)#
  if (n1 < n2)#
    e1 <- expand(e1, n1, n2)#
  else if (n1 > n2)#
    e2 <- expand(e2, n2, n1)#
  #
  # subtraction#
  if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
  if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.duration(e2))#
      e1 + -e2#
    else if (is.POSIXt(e1) && is.duration(e2))#
      e1 + -e2#
    else if (is.POSIXt(e1) && is.POSIXt(e2))#
      as.duration(difftime(e1, e2))    #
    else if (is.POSIXt(e2)) #
      stop("Can only subtract from POSIXt objects")#
    else if (is.POSIXt(e1) && is.difftime(e2))#
      e1 + -as.numeric(e2, units = "secs")#
    else if (is.POSIXt(e1))#
      structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
    else if (is.difftime(e1) || is.difftime(e2))#
      e1 + -e2#
    else#
      base::'-'(e1, e2)#
}#
#
#
# printing durations#
print.duration <- function(x) {#
  format_unit <- function(x, xsign, singular = NULL) {#
    if (is.null(singular)) singular <- deparse(substitute(x))#
    x <- x * sign(xsign)#
    plural <- paste(singular, "s", sep = "")#
    ifelse(x == 0, "", #
      paste(x, ifelse(!is.na(x) & x == 1, singular, plural)))#
  }#
#
  months <- abs(x$months)#
  seconds <- abs(x$seconds)#
#
  year <- months %/% 12#
  month <- months %% 12#
  #
  week <- (seconds %/% 604800)#
  day <- (seconds - week * 604800) %/% 86400#
  hour <- (seconds - week * 604800 - day * 86400) %/% 3600#
  minute <- (seconds - week * 604800 - day * 86400 - hour * 3600) %/% 60#
  second <- seconds - week * 604800 - day * 86400 - hour * 3600 - minute * 60#
  #
  duration <- cbind(#
    format_unit(year, x$month), #
    format_unit(month, x$month), #
    format_unit(week, x$seconds),#
    format_unit(day, x$seconds),#
    format_unit(hour, x$seconds), #
    format_unit(minute, x$seconds), #
    format_unit(second, x$seconds)#
  )#
  #
  collapse <- function(x) {#
    all <- x[x != ""]#
    if (length(all) == 0) return("0 seconds")#
    paste(all, collapse = ", ")#
  }#
  #
  print(paste(aaply(duration, 1, collapse)))#
}
decimal_date(date)
traceback()
#
leap.year <- function(year) {#
	if (is.POSIXt(year))#
		year <- year(year)#
  (year %% 4 == 0) & ((year %% 100 != 0) | (year %% 400 == 0))#
}
decimal_date(date)
source("durations.r")
source("accessors.r")
new_duration(months = 1, secs = 1)
options(digits = 15)
new_duration(months = 1, secs = 1)
(60 * 60 * 24 * 356 * 3 + 60 * 60 * 24 * 366) * 10
2^64
2^64 - 111111111111111
2^64 - 111111111111111 + 111111111111111
2^64 - 1
2^32
2^32 - 1
2^32 - 2
2^33
2^33 - 1
2^33 - 2
2^60
2^60 - 1
2^50
2^50 - 1
2^50 - 2
2^50 - 10
2^55
2^55 - 1
2^52 - 1
2^52
2^52 - 100
2^53
2^53 - 1
2^53 - 2
2^54
2^54 - 1
2^53 - 2^53
2^54 - 2^54
2^55 - 2^55
2^55 - 2^54
2^55 / 2^54
z <- sys.time()
z <- Sys.time()
difftime(z + 1238976000, z)
14340 / 356
1238976000 * 10
10^16
options(digits = 16)
10^16
10^15
1000000000000000 - 1
10000000000000000 - 1
100000000000000 - 1
100000000000000000 - 1
9999999999999999 - 1
999999999999999 - 1
options(digits = 17)
999999999999999 - 1
9999999999999999 - 1
1000000000000000 - 1 - 1
(1000000000000000 - 1) - 1
1000000000000000 - 1
2^53
2^53 + 1
3600 * 24 * 356
9007/12
3600 * 24 * 7 * 100
3600 * 24 * 1000
new_duration(months = 99999999, secs = 9999999)
new_duration(months = 9007199, secs = 54740992)
source("print.duration.r")
new_duration(months = 9007199, secs = 54740992)
library(plyr)
new_duration(months = 9007199, secs = 54740992)
new_duration(months = 9007199, secs = 54740993)
new_duration(months = 9007199, secs = 54740991)
new_duration(months = 9007199, secs = 54740990)
new_duration(months = 9007199, secs = 54740980)
new_duration(months = 9007199, secs = 54740981)
new_duration(months = 9007198, secs = 54740991)
new_duration(months = 9007198, secs = 54740990)
new_duration <- function(secs = 0, mins = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0){#
	#
	if( months - trunc(months) != 0 || years - trunc(years) != 0)#
		stop("months and years must be in integer values", call. = F)#
	#
	dur <- secs + mins * 60 + hours * 3600 + days * 86400 + weeks * 604800 #
	#
	#
	dur <- dur + 10 ^ 10 * months + 12* 10 ^ 10 * years#
	structure(dur, class = "duration")#
}
new_duration(months = 9007199, secs = 54740992)
new_duration(months = 9007199, secs = 54740991)
new_duration(months = 9007198, secs = 54740992)
new_duration(months = 9007198, secs = 54740993)
new_duration(months = 9007189, secs = 54740993)
new_duration(months = 9007189, secs = 54740992)
new_duration(months = 9007099, secs = 54740992)
new_duration(months = 9007099, secs = 54740993)
new_duration(months = 907099, secs = 54740993)
new_duration(months = 907099, secs = 54740992)
new_duration(months = 97099, secs = 54740993)
new_duration(months = 197099, secs = 54740993)
new_duration(months = 997099, secs = 54740993)
new_duration(months = 597099, secs = 54740993)
new_duration(months = 697099, secs = 54740993)
new_duration(months = 797099, secs = 54740993)
new_duration(months = 897099, secs = 54740993)
new_duration(months = 900000, secs = 54740993)
new_duration(months = 990000, secs = 54740993)
new_duration(months = 950000, secs = 54740993)
new_duration(months = 910000, secs = 54740993)
new_duration(months = 901000, secs = 54740993)
new_duration(months = 900600, secs = 54740993)
new_duration(months = 900700, secs = 54740993)
new_duration(months = 900800, secs = 54740993)
new_duration <- function(secs = 0, mins = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0){#
	#
	if( months - trunc(months) != 0 || years - trunc(years) != 0)#
		stop("months and years must be in integer values", call. = F)#
	#
	dur <- secs + mins * 60 + hours * 3600 + days * 86400 + weeks * 604800 #
	#
	#
	dur <- dur + 10 ^ 9 * months + 12* 10 ^ 9 * years#
	structure(dur, class = "duration")#
}
new_duration(months = 90071992, secs = 54740992)
new_duration(months = 90071992, secs = 54740993)
new_duration(months = 90071992, secs = 54740991)
new_duration(months = 90070000, secs = 54740991)
new_duration( secs = 54740991)
new_duration(months =  secs = 54740991)
print.duration(2^53)
print.duration(2^53 - 1)
rm("print.duration")
new_duration(months = 90070000, secs = 54740991)
new_duration(months = 1)
new_duration(months = 1, secs = 54740992)
new_duration <- function(secs = 0, mins = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0){#
	#
	if( months - trunc(months) != 0 || years - trunc(years) != 0)#
		stop("months and years must be in integer values", call. = F)#
	#
	dur <- secs + mins * 60 + hours * 3600 + days * 86400 + weeks * 604800 #
	#
	#if (dur >= 10#
	#
	dur <- dur + 10 ^ 8 * months + 12* 10 ^ 8 * years#
	structure(dur, class = "duration")#
}
new_duration(secs = 10^8)
source("print.duration.r")
new_duration(secs = 10^8)
new_duration(months = 1)
source("print.duration.r")
new_duration(months = 1)
new_duration(secs = 10^8)
new_duration(secs = 10^8 - 1)
new_duration <- function(secs = 0, mins = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0){#
	#
	if( months - trunc(months) != 0 || years - trunc(years) != 0)#
		stop("months and years must be in integer values", call. = F)#
	#
	dur <- secs + mins * 60 + hours * 3600 + days * 86400 + weeks * 604800 #
	#
	if (dur >= 10^8)#
		stop("seconds overflow: see 'duration' documentation")#
	#
	dur <- dur + 10 ^ 8 * months + 12* 10 ^ 8 * years#
	structure(dur, class = "duration")#
}
new_duration(secs = 10^8)
source("accessors.r")
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
 #
  if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
  if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
  if (is.duration(e1) && is.duration(e2)) #
    add_duration_to_duration(e1, e2)#
  else if (is.duration(e1) && is.POSIXt(e2))#
    add_duration_to_date(e2, e1)#
  else if (is.duration(e2) && is.POSIXt(e1)) #
    add_duration_to_date(e1, e2)#
  else if (is.POSIXt(e1) && is.POSIXt(e2))#
    stop("binary '+' is not defined for \"POSIXt\" objects")#
  else if (is.POSIXt(e1) || is.POSIXt(e2))#
    base::'+.POSIXt'(e1,e2)#
  else if (is.difftime(e1) && is.difftime(e2))#
    make_difftime( as.numeric(e1, units = "secs") +  as.numeric(e2, units = "secs"))#
  else if (is.difftime(e1)){#
    e2 <- structure(e2, units = units(e1), class = "difftime")#
    make_difftime( as.numeric(e1, units = "secs") +  as.numeric(e2, units = "secs"))#
  }#
  else if (is.difftime(e2)){#
    e1 <- structure(e1, units = units(e2), class = "difftime")#
     make_difftime( as.numeric(e1, units = "secs") +  as.numeric(e2, units = "secs"))#
  }#
  else #
    base::'+'(e1, e2)#
  #
}  #
#
add_duration_to_date <- function(date, dur) {#
  second(date) <- second(date) + just_seconds(dur)#
  month(date) <- month(date) + just_months(dur)#
  date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
	seconds <- just_seconds(dur1) + just_seconds(dur2)#
	months <- just_months(dur1) + just_months(dur2)#
	new_duration(secs = seconds, months = months)#
}#
  #
#
make_difftime <- function (seconds) {  #
    if (seconds < 60) #
        units <- "secs"#
    else if (seconds < 3600)#
        units <- "mins"#
    else if (seconds < 86400)#
        units <- "hours"#
    else if (seconds < 604800)#
    	units <- "days"#
    else units <- "weeks"#
    #
    switch(units, secs = structure(seconds, units = "secs", class = "difftime"), #
    mins = structure(seconds/60, units = "mins", class = "difftime"), #
    hours = structure(seconds/3600, units = "hours", class = "difftime"), #
    days = structure(seconds/86400, units = "days", class = "difftime"), #
    weeks = structure(seconds/(604800), units = "weeks", class = "difftime"))#
}#
#
#
"*.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    multiply_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    multiply_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
#
multiply_duration_by_numeric <- function(num, dur){#
	seconds <- just_seconds(dur)#
	months <- just_months(dur)#
	new_duration(months = num * months, secs = num * seconds)#
}#
#
"/.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    divide_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    divide_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
#
divide_duration_by_numeric <- function(num, dur){#
	seconds <- just_seconds(dur)#
	months <- just_months(dur)#
	new_duration(months = months / num, secs = seconds / num)#
}
a <- new_duration(days = 3, secs = 3)
a
a * 3
a / 3
3 / a
3 * a
b <- new_duration ( months = 4, secs = 3)
b / 3
b <- new_duration ( months = 3, secs = 3)
b / 3
b * 3
a <- new_duration(months = -1. secs = -1)
a <- new_duration(months = -1, secs = -1)
a
a <- new_duration(months = -1)
a
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv")
time <- hpi[,"year"] + (hpi[,"quarter"] - 1) / 4#
hpi <- cbind(hpi,time)#
hpi$city_state <- paste(hpi$city, hpi$state, sep= ", ")
#
returnMaxTimeHPI <- function(d, maxcolumn) {#
	unique(d[d[,maxcolumn] == max(d[,maxcolumn]), c("hpi","time", "fips_msa")])#
	}
MaxHPI <- ddply(hpi, .(state,city) , returnMaxTimeHPI, maxcolumn = "hpi")
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(state,city) , returnMaxTimeHPI, maxcolumn = "hpi")
names(HPI09)[3] <- "hpi_2009"
maximum_hpi <- merge(MaxHPI, HPI09[,1:3])#
#
maximum_hpi$cs <- paste(maximum_hpi$city, maximum_hpi$state, sep= ", ")
maximum_hpi$change <- maximum_hpi$hpi - maximum_hpi$hpi_2009
#
mhpi <- maximum_hpi#
names(mhpi)[5] <- "fips_cbsa"
location <- read.csv("../../data/city-location/location-database2007.csv", header = T)
head(location)
cities <- unique(location[,c(1,2,4,5,8)])
city_hpi <- merge(mhpi, cities, by = c("fips_cbsa", "state"))
city_hpi <- city_hpi[city_hpi$state != "HI" & city_hpi$state != "AK",]
library(ggplot2)
library(plyr)#
library(ggplot2)#
library(R.oo)#
options(stringsAsFactors = F)#
savePlot <- function(..., plot= TRUE, big = FALSE)#
{#
nameOfPlot <- substitute(...)#
nameOfPlot <- gsub("_", "-", nameOfPlot)#
cat("\nPrinting plot ", nameOfPlot,".pdf in folder 'exports'", sep ="")#
if(plot)#
if(big)#
ggsave(..., file=paste("exports/", nameOfPlot,"-BIG.pdf",sep = "", collapse = ""), width=20, height=15) #
else#
ggsave(..., file=paste("exports/", nameOfPlot,".pdf",sep = "", collapse = ""), width=8, height=6)#
else#
cat("\nJust Kidding!!!\n")#
cat("\n")#
}
#
geo_change <- qplot(longitude, latitude, data = city_hpi, colour =   change, size = change, main = "Map of cumulative drop in HPI")#
geo_change#
savePlot(geo_change)
savePlot <- function(..., plot= TRUE, big = FALSE)#
{#
nameOfPlot <- substitute(...)#
nameOfPlot <- gsub("_", "-", nameOfPlot)#
cat("\nPrinting plot ", nameOfPlot,".pdf in folder 'exports'", sep ="")#
if(plot)#
if(big)#
ggsave(..., file=paste("exports/", nameOfPlot,"-BIG.pdf",sep = "", collapse = ""), width=20, height=15) #
else#
ggsave(..., file=paste("exports/", nameOfPlot,".pdf",sep = "", collapse = ""), width=10, height=6)#
else#
cat("\nJust Kidding!!!\n")#
cat("\n")#
}
geo_change <- qplot(longitude, latitude, data = city_hpi, colour =   change, size = change, main = "Map of cumulative drop in HPI")#
geo_change#
savePlot(geo_change)
city_hpi$drop_rate <- with(city_hpi, change / (2009 - time))
dropmap <- qplot(longitude, latitude, data = city_hpi, colour =   change, size = change, main = "Map of cumulative drop in HPI")#
geo_change#
savePlot(dropmap)
ratemap <- qplot(longitude, latitude, data = city_hpi, colour =   drop_rate, size = drop_rate, main = "Map of drop rates in HPI")#
ratemap#
savePlot(ratemap)
city_hpi$year <- as.factor(city_hpi$time)#
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where")#
geo_time + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))#
timemap#
savePlot(timemap)
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where")#
timemap + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))#
timemap#
savePlot(timemap)
city_hpi$year <- as.factor(trunc(city_hpi$time))
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where")#
timemap + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sk
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where")#
timemap + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where")#
timemap + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))#
timemap
timemap + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
city_hpi$year <- as.factor(city_hpi$time)
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
timemap
city_hpi$year <- as.factor(trunc(city_hpi$time))#
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
savePlot(timemap)
timemap
savePlot(timemap)
qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, size = rate, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, size = drop_rate, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
timemap <- qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, size = drop_rate, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))#
savePlot(timemap)
qplot(longitude, latitude, data = na.omit(city_hpi), colour =   year, size = change, main = "When the HPI peaked where") + scale_colour_manual(value = c("dark violet", "red", "orange", "lime green", "sky blue"))
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv", header = T)#
#"../fhfa-house-price-index/fhfa-house-price-index-msa.csv"#
hpi$time <- hpi$year + hpi$quarter/4#
hpi <- na.omit(hpi)
get_max <- function(df){#
	hpi2009 <- df$hpi[df$time == 2009]#
	df <- df[df$hpi == max(df$hpi),]#
	df$change <- hpi2009 - df$hpi#
	df#
} #
#
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"
maxhpi$rate <- with(maxhpi,change/(2009.25 - time))#
maxhpi <- within(maxhpi, per_change <- change/hpi)#
maxhpi <- within(maxhpi, per_rate <- rate / hpi)#
maxhpi <- within(maxhpi, state <- as.character(state))#
for (i in 1:nrow(maxhpi))#
	maxhpi$state[i] <- trim(gsub("MSAD", "", maxhpi$state[i]))
library(plyr)#
library(ggplot2)#
library(R.oo)#
options(stringsAsFactors = F)#
savePlot <- function(..., plot= TRUE, big = FALSE)#
{#
nameOfPlot <- substitute(...)#
nameOfPlot <- gsub("_", "-", nameOfPlot)#
cat("\nPrinting plot ", nameOfPlot,".pdf in folder 'exports'", sep ="")#
if(plot)#
if(big)#
ggsave(..., file=paste("exports/", nameOfPlot,"-BIG.pdf",sep = "", collapse = ""), width=20, height=15) #
else#
ggsave(..., file=paste("exports/", nameOfPlot,".pdf",sep = "", collapse = ""), width=8, height=6)#
else#
cat("\nJust Kidding!!!\n")#
cat("\n")#
}
#
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv", header = T)#
#"../fhfa-house-price-index/fhfa-house-price-index-msa.csv"#
hpi$time <- hpi$year + hpi$quarter/4#
hpi <- na.omit(hpi)#
#
# qplot(data = hpi, year, hpi, geom = "line") + facet_wrap(~ city) + opts(legend.position = "none")#
# ggsave(file="all_hpi.pdf", width=20, height=15) #
#
get_max <- function(df){#
	hpi2009 <- df$hpi[df$time == 2009]#
	df <- df[df$hpi == max(df$hpi),]#
	df$change <- hpi2009 - df$hpi#
	df#
} #
#
maxhpi <- ddply(hpi, .(fips_msa), get_max)#
maxhpi <- maxhpi[,c(1,2,3,6,8,9)]#
names(maxhpi)[3] <- "cbsa"#
#
maxhpi$rate <- with(maxhpi,change/(2009.25 - time))#
maxhpi <- within(maxhpi, per_change <- change/hpi)#
maxhpi <- within(maxhpi, per_rate <- rate / hpi)#
maxhpi <- within(maxhpi, state <- as.character(state))#
for (i in 1:nrow(maxhpi))#
	maxhpi$state[i] <- trim(gsub("MSAD", "", maxhpi$state[i]))
outcome <- qplot(data = maxhpi, hpi, per_rate, colour = state, geom = "text", label = state, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
outcome#
savePlot(outcome)
pop <- read.csv("pop-cbsa.csv", header = T)#
pop <- pop[-c(1,2),c(1,3)]#
pop$cbsa <- as.numeric(pop$cbsa)#
pop$pop2k <- as.numeric(pop$pop2k)#
#
maxhpi <- merge(maxhpi, pop, by = "cbsa", all.x = T)
FLoutcome <- qplot(data = maxhpi[maxhpi$state == "FL",], hpi, per_rate, geom = "text", label = state, main = "Florida Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
FLoutcome#
savePlot(FLoutcome)
CAoutcome <- qplot(data = maxhpi[maxhpi$state == "CA",], hpi, per_rate, geom = "text", label = state, main = "California Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
CAoutcome#
savePlot(CAoutcome)
AZoutcome <- qplot(data = maxhpi[maxhpi$state == "AZ",], hpi, per_rate,  geom = "text", label = state, main = "Arizona Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
AZoutcome#
savePlot(AZoutcome)
NVoutcome <- qplot(data = maxhpi[maxhpi$state == "NV",], hpi, per_rate, geom = "text", label = state, main = "Nevada Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
NVoutcome#
savePlot(NVoutcome)
FCANoutcomes <- qplot(data = maxhpi[maxhpi$state %in% c("AZ", "CA", "FL", "NV", "OR"),], hpi, per_rate, geom = "text", label = state, colour = state, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none") + facet_wrap( ~ state)#
FCANoutcomes#
savePlot(FCANoutcomes)
CAcityoutcome <- qplot(data = maxhpi[maxhpi$state == "CA",], hpi, per_rate, colour = state, geom = "text", label = city, main = "Max HPI vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") + opts(legend.position = "none")#
CAcityoutcome#
savePlot(CAcityoutcome, big = T)
#
location <- read.csv("loc-cbsa.csv", header = T)#
location <- location[-c(1,2), c(1,3,4)]#
names(location) <- c("cbsa", "longitude", "latitude")#
location$cbsa <- as.numeric(location$cbsa)#
location$longitude <- as.numeric(location$longitude)#
location$latitude <- as.numeric(location$latitude)#
#
maxhpi <- merge(maxhpi, location, by = "cbsa", all.x = T)
calhpi
calhpi <-na.omit(maxhpi[maxhpi$state == "CA",])
calhpi
#
LA <- maxhpi[210,]#
LA$latitude <- 33.93#
LA$longitude <- -118.40#
LA$n_or_s <- "s"#
LA$region <- "so_cal"#
#
SanFran <- maxhpi[316,]#
SanFran$latitude <- 37.75#
SanFran$longitude <- -122.68#
SanFran$n_or_s <- "n"#
SanFran$region <- "bay_area"#
#
Oakland <- maxhpi[252,]#
Oakland$latitude <- 37.73#
Oakland$longitude <- -122.22#
Oakland$n_or_s <- "n"#
Oakland$region <- "bay_area"#
#
Irvine <- maxhpi[319,]#
Irvine$latitude <- 33.67#
Irvine$longitude <- -117.88#
Irvine$n_or_s <- "s"#
Irvine$region <- "so_cal"#
#
calhpi <- rbind(calhpi, LA, SanFran, Oakland, Irvine) #
calhpi[c(9, 14, 16, 19, 20, 26, 27),14] <- "bay_area"#
calhpi$region <- c("central valley",#
					"central valley",#
					"southern desert",#
					"central valley",#
					"central valley",#
					"central valley",#
					"central valley",#
					"central valley",#
					"bay area",#
					"so cal",#
					"central valley",#
					"so cal",#
					"central valley",#
					"bay area",#
					"so cal",#
					"bay area",#
					"so cal",#
					"so cal",#
					"bay area",#
					"bay area",#
					"central valley",#
					"bay area",#
					"central valley",#
					"central valley",#
					"so cal",#
					"bay area",#
					"bay area",#
					"so cal")
for (i in 1:nrow(calhpi)){#
	if (calhpi$latitude[i] >= 36.14)#
		calhpi$n_or_s[i] <- "n"#
	else#
		calhpi$n_or_s[i] <- "s"#
}#
#
#
for (i in 1:nrow(calhpi)){#
	if (calhpi$latitude[i] <= 36.14 & calhpi$longitude[i] <= -121.768)#
		calhpi$region[i] <- "bay_area"#
	else if (calhpi$latitude[i]<= 35.38)#
		calhpi$region[i] <- "so_cal"#
	else#
		calhpi$region[i] <- "other"#
}
LA <- maxhpi[210,]#
LA$latitude <- 33.93#
LA$longitude <- -118.40#
LA$n_or_s <- "s"#
LA$region <- "so_cal"#
#
SanFran <- maxhpi[316,]#
SanFran$latitude <- 37.75#
SanFran$longitude <- -122.68#
SanFran$n_or_s <- "n"#
SanFran$region <- "bay_area"#
#
Oakland <- maxhpi[252,]#
Oakland$latitude <- 37.73#
Oakland$longitude <- -122.22#
Oakland$n_or_s <- "n"#
Oakland$region <- "bay_area"#
#
Irvine <- maxhpi[319,]#
Irvine$latitude <- 33.67#
Irvine$longitude <- -117.88#
Irvine$n_or_s <- "s"#
Irvine$region <- "so_cal"#
#
calhpi <- rbind(calhpi, LA, SanFran, Oakland, Irvine)
calhpi[c(9, 14, 16, 19, 20, 26, 27),14] <- "bay_area"#
calhpi$region <- c("central valley",#
					"central valley",#
					"southern desert",#
					"central valley",#
					"central valley",#
					"central valley",#
					"central valley",#
					"central valley",#
					"bay area",#
					"so cal",#
					"central valley",#
					"so cal",#
					"central valley",#
					"bay area",#
					"so cal",#
					"bay area",#
					"so cal",#
					"so cal",#
					"bay area",#
					"bay area",#
					"central valley",#
					"bay area",#
					"central valley",#
					"central valley",#
					"so cal",#
					"bay area",#
					"bay area",#
					"so cal")
CalByRegion <- qplot(data = calhpi, hpi, per_rate, colour = region,  geom = "text", label = state,main = "California Max HPI by region vs. outcome", ylab = "Rate of change per year (as percentage of max HPI)", xlab = "Maximum HPI (2005-2009)") #
CalByRegion#
savePlot(CalByRegion)
calhpi2 <- hpi[hpi$state == "CA" | hpi$state == "CA  MSAD",]#
names(calhpi2)[3] <- "cbsa"#
toget <- calhpi[,c(1,14)]#
#
calhpi2 <- merge(calhpi2, toget, by = "cbsa")
CalHpiByRegion <- qplot(data = calhpi2, time, hpi, geom = "line", group = cbsa, colour = region, main = "California HPI by region")#
CalHpiByRegion#
savePlot(CalHpiByRegion)
calhpi2 <- merge(calhpi2, pop, by = "cbsa", all.x = T)
qplot(data = calhpi2, time, hpi, geom = "line", group = region, colour = region, main = "California HPI by region")
CalHpiByRegion
