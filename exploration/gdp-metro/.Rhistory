b
paste(a,b)
paste(a,b,sep="")
paste(a,b,sep="",collapse = "")
paste(a,b,sep="",collapse = "-")
source(file.choose(),chdir=T)
a <- "21      19       2       0       0       0      91"
a
instal.packages("R.oo")
install.packages("R.oo")
library(R.oo)
?R.oo
strsplit(a," ")
source(file.choose(),chdir=T)
num_vector(a)
read.csv(file.choose())
library(ggplot2)
read.csv(file.choose())
v <-read.csv(file.choose())
?subset
subset()
names(v)
subset(v, statefips==6 & countyfips== 47)
options(stringsAsFactors=FALSE)
time <- v[,"year"] + (hpi[,"quarter"]) / 4
time <- v[,"year"] + (v[,"quarter"]) / 4
v2 <- cbind(v,time)
qplot(x=time, y=total, data=v2)
merced<-subset(v, statefips==6 & countyfips== 47)
v2 <- cbind(merced,time)
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
merced2
merced<-subset(v, statefips==6 & countyfips== 47 & type=="all")
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
merced<-subset(v, statefips==6 & countyfips== 47)# & type=="all")#
#
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
#
merced2
#
qplot(x=time, y=total, data=merced2)
hpi <- read.csv(file.choose())
nebraska <- subset(hpi, state=="NE")
nebraska
?pch
help(matrix)
help
library(ggplot)
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  #
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors)#
    out#
}#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics
 compute.bond.statistics = function(rates, times, cashflows)#
+ {#
+   discount.factors = exp( -1 * times * rates )#
+   bond.value       = sum(cashflows * discount.factors)#
+   duration         = sum(cashflows * discount.factors * times)    / bond.value#
+   #
+   out = list(bond.value = bond.value, duration = duration)#
+     out#
+ }#
> #
> term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
> term.structure.times = 1:12#
> #
> bond1.cash.flows = c(rep(6,11),106)#
> bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
> bond1.statistics
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  #
  out = list(bond.value = bond.value, duration = duration)#
    out#
}#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics
compute.bond.convexity = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(convexity = convexity, ytm = ytm)#
  out#
}
bond1.cash.flows = c(rep(6,11),106)#
bond1.convexity = compute.bond.convexity(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.convexity
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100
term.structure.times2= 1:5
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100#
#
term.structure.times2= 1:5#
#
bond2.cash.flows = c(rep(10,4),110)#
>#
 bond1.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)
#
bond2.cash.flows = c(rep(10,4),110)
 bond2.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)
 bond2.statistics
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100#
#
term.structure.times2= 1:5#
#
bond2.cash.flows = c(rep(10,4),110)#
>#
 bond2.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)#
 bond2.statistics
bond2.convexity = compute.bond.convexity(term.structure.rates2, term.structure.times2,bond2.cash.flows)#
bond2.convexity
> term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100
term.structure.rates.shift
term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100
 bond1.statistics = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
bond1.statistics
bond1.convexity = compute.bond.convexity(term.structure.rates.shift, term.structure.times,bond1.cash.flows)#
 #
bond1.convexity
term.structure.rates2.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75)/100
bond2.statistics = compute.bond.statistics(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)#
bond2.statistics
#
bond2.convexity = compute.bond.convexity(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)#
bond2.convexity
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors, convexity = convexity, ytm = ytm)#
  out#
}#
#
#
#
##########################################################################################################################################################
##########################################################################################################################################################
##########################################################################################################################################################
#
#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
####
### Bond 1#
####
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics#
#
#
####
### Bond 2#
####
#
bond2.cash.flows = c(rep(10,4),110)#
bond2.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
bond2.statistics#
#
#
####
### obligation#
####
#
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
B1 = bond1.statistics$bond.value#
D1 = bond1.statistics$duration#
#
B2 = bond2.statistics$bond.value#
D2 = bond2.statistics$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration#
#
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]#
x1#
x2
round(x2,0) * round(new.bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x2,0) * round(bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x2,0) * round(new.bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x1,0) * round(bond1.statistics.shift$bond.value,2)
bond1.statistics.shift = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)#
> bond1.statistics.shift
round(x1,0) * round(bond1.statistics.shift$bond.value,2)
term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100#
bond1.statistics.shift = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
bond1.convexity.shift = compute.bond.convexity(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
term.structure.rates2.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75)/100#
bond2.statistics.shift = compute.bond.statistics(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)
bond2.convexity.shift = compute.bond.convexity(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)
B1 = bond1.statistics.shift$bond.value#
D1 = bond1.statistics.shift$duration
B2 = bond2.statistics.shift$bond.value#
D2 = bond2.statistics.shift$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]
x1
x2
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors, convexity = convexity, ytm = ytm)#
  out#
}#
#
#
#
##########################################################################################################################################################
##########################################################################################################################################################
##########################################################################################################################################################
#
#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
####
### Bond 1#
####
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics#
#
#
####
### Bond 2#
####
#
bond2.cash.flows = c(rep(10,4),110)#
bond2.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
bond2.statistics#
#
#
####
### obligation#
####
#
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics#
#
####
### Solving for x1 and x2#
####
#
B1 = bond1.statistics$bond.value#
D1 = bond1.statistics$duration#
#
B2 = bond2.statistics$bond.value#
D2 = bond2.statistics$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration#
#
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]#
x1#
x2
new.term.structure.rates = term.structure.rates - 0.01#
#
new.bond1.statistics = compute.bond.statistics(new.term.structure.rates, term.structure.times,bond1.cash.flows)#
new.bond1.statistics#
#
round(x1,0) * round(new.bond1.statistics$bond.value,2)#
#
#
new.bond2.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
new.bond2.statistics#
#
round(x2,0) * round(new.bond2.statistics$bond.value,2)
library(termstrc)
head(termstrc)
data(eurobonds)
eurobonds$HUNGARY
group      =  "HUNGARY"#
bonddata   =  eurobonds#
method     =  "Nelson/Siegel"#
fit        =  "prices"#
weights    =  "none"#
matrange   =  c(1,30)#
b          =  matrix(rep(c(0,0,0, 1),3),nrow=3,byrow=TRUE)#
#
x =  nelson_estim(group, bonddata, matrange, method, fit, weights, startparam=b)#
x#
plot(x,errors="none")
t(creat_cashflows_matrix)(eurobonds$HUNGARY, include_price=FALSE)
t(create_cashflows_matrix)(eurobonds$HUNGARY, include_price=FALSE)
t(create_cashflows_matrix(eurobonds$HUNGARY, include_price=FALSE))
hun = t(create_cashflows_matrix(eurobonds$HUNGARY, include_price=FALSE))
solve(hun)
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv")
hpi$time <- hpi[,"year"] + (hpi[,"quarter"] - 1) / 4#
#
hpi$city_state <- paste(hpi$city, hpi$state, sep= ", ")
library(ggplot2)#
options(stringsAsFactors= FALSE)
hpi$time <- hpi[,"year"] + (hpi[,"quarter"] - 1) / 4#
#
hpi$city_state <- paste(hpi$city, hpi$state, sep= ", ")
head(hpi)
	unique(d[d[,maxcolumn] == max(d[,maxcolumn]), c("hpi","time")])
returnMaxTimeHPI <- function(d, maxcolumn)#
	unique(d[d[,maxcolumn] == max(d[,maxcolumn]), c("hpi","time")])
MaxHPI <- ddply(hpi, .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")
head(MaxHPI)
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")
names(HPI09)[3] <- "hpi_2009"
maximum_hpi <- merge(MaxHPI, HPI09[,1:3])
head(maximum_hpi)
maximum_hpi$percent_change <- maximum_hpi$hpi / maximum_hpi$hpi_2009 * 100 - 100
head(maximum_hpi)
MaxHPI <- ddply(hpi, .(city,state) , returnMaxTimeHPI, maxcolumn = "hpi")
head(MaxHPI)
MaxHPI <- ddply(hpi, .(city,state) , returnMaxTimeHPI, maxcolumn = "hpi")#
#
#
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(city,state) , returnMaxTimeHPI, maxcolumn = "hpi")
names(HPI09)[3] <- "hpi_2009" #
#
#
maximum_hpi <- merge(MaxHPI, HPI09[,1:3])#
#
#
#
#
maximum_hpi$percent_change <- maximum_hpi$hpi / maximum_hpi$hpi_2009 * 100 - 100
head(maximum_hpi)
head(MaxHPI)
MaxHPI <- ddply(hpi, .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(city,state) , returnMaxTimeHPI, maxcolumn = "hpi")
head(HPI09)
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")
head(HPI09)
names(HPI09)[3] <- "hpi_2009"
maximum_hpi <- merge(MaxHPI, HPI0, by= "fips_msa")
maximum_hpi <- merge(MaxHPI, HPI09, by= "fips_msa")
head(maximum_hpi)
names(HPI09)[3] <- "hpi_2009"
head(HPI09)
names(HPI09)[3] <- "time"
head(HPI09)
names(HPI09)[2] <- "hpi_09"
names(HPI09)[2] <- "hpi_2009"
maximum_hpi <- merge(MaxHPI, HPI09, by= "fips_msa")
head(maximum_hpi)
head(MaxHPI)
names(MaxHPI)[3]<- "max_time"
maximum_hpi <- merge(MaxHPI, HPI09, by= "fips_msa")
head(maximum_hpi)
names(MaxHPI)[c(2,3)]<- c("max_hpi","max_time")
head(MaxHPI)
maximum_hpi <- merge(MaxHPI, HPI09, by= "fips_msa")
head(maximum_hpi)
maximum_hpi$percent_change <- maximum_hpi$max_hpi / maximum_hpi$hpi_2009 * 100 - 100
head(maximum_hpi)
rank_change <- rank(-percent_change, ties.method = "first")
maximum_hpi$rank <- rank(-percent_change, ties.method = "first")
?rank
maximum_hpi$rank <- rank(-maximum_hpi[percent_change], ties.method = "first")
#
maximum_hpi$percent_change <- maximum_hpi$max_hpi / maximum_hpi$hpi_2009 * 100 - 10
head(maximum_hpi)
maximum_hpi$rank <- rank(-maximum_hpi, ties.method = "first")
rank(-percent_change, ties.method = "first")
attempt <- ddply(maximum_hpi,fips_msa,transform, rank(-percent_change, ties.method = "first"))
attempt <- ddply(maximum_hpi,"fips_msa",transform, rank(-percent_change, ties.method = "first"))
head(attempt)
attempt <- transform(maximum_hpi, rank(-percent_change, ties.method = "first"))
head(attempt)
attempt <- rank(-percent_change, ties.method = "first"))
attempt <- rank(-percent_change, ties.method = "first")
rank(percent_change, ties="first")
rank(-percent_change, ties="first")
head(maximum_hpi)
rank(-"percent_change", ties="first")
maximum_hpi$rank <- rank(- percent_change, ties="first")
maximum_hpi$percent_change<- maximum_hpi$max_hpi / maximum_hpi$hpi_2009 * 100 - 100
maximum_hpi$rank <- rank(- percent_change, ties="first")
head(maximum_hpi)
?rank
maximum_hpi$rank <- rank(-subset(maximum_hpi,percent_change), ties="first")
subset(maximum_hpi, "percent_change")
?subset
subset(maximum_hpi, percent_change)
str()
str(maximum_hpi)
heade(maximum_hpi[percent_change])
head(maximum_hpi[percent_change])
head(maximum_hpi["percent_change"])
maximum_hpi$rank <- rank(-maximum_hpi["percent_change"], ties="first")
head(maximum_hpi)
subset(maximum_hpi, rank <= 10 | rank > 900)
subset(maximum_hpi, rank <= 10 | rank > 100)
subset(maximum_hpi, rank <= 10 | rank > 500)
subset(maximum_hpi, rank <= 10 | rank > 300)
subset(maximum_hpi, rank <= 10 | rank > 400)
subset(maximum_hpi, rank <= 10 | rank > 350)
subset(maximum_hpi, rank <= 10 | rank > 300)
subset(maximum_hpi, rank <= 10 | rank > 310)
gdp <- read.csv("../../data/gdp-metro/gdp-metro.csv")
head(gpd)
head(gdp)
head(maximum_hpi)
names(maximum_hpi)[1] <- "fips"
head(maximum_hpi)
gpd_hpi <- merge(gdp, maximum_hpi, by="fips")
head(gdp_hpi)
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")
head(gdp_hpi)
library(ggplot2)#
options(stringsAsFactors= FALSE)#
#
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv")#
hpi$time <- hpi[,"year"] + (hpi[,"quarter"] - 1) / 4#
#
hpi$city_state <- paste(hpi$city, hpi$state, sep= ", ")
returnMaxTimeHPI <- function(d, maxcolumn)#
	unique(d[d[,maxcolumn] == max(d[,maxcolumn]), c("hpi","time")])#
#
#
MaxHPI <- ddply(hpi, .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")#
#
#
HPI09 <- ddply(hpi[ hpi[,"year"] >= 2009 ,], .(fips_msa) , returnMaxTimeHPI, maxcolumn = "hpi")
#
names(HPI09)[2] <- "hpi_2009" #
names(MaxHPI)[c(2,3)]<- c("max_hpi","max_time")#
#
maximum_hpi <- merge(MaxHPI, HPI09, by= "fips_msa")#
#
maximum_hpi$percent_change<- maximum_hpi$max_hpi / maximum_hpi$hpi_2009 * 100 - 100
maximum_hpi$rank <- rank(-maximum_hpi["percent_change"], ties="first")#
#
#Anything that was ranked 310 and higher had a percent change of 0, didn't think that finding bottom ten was sufficient#
#
subset(maximum_hpi, rank <= 10 | rank > 310)
gdp <- read.csv("../../data/gdp-metro/gdp-metro.csv")#
#
names(maximum_hpi)[1] <- "fips" #
#
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")
selected <-subset(gdp_hpi, rank<=10 | rank > 310)
head(selected)
selected.1 <-subset(gdp_hpi, rank<=10 | rank > 310)
indust <- read.csv("../../data/gdp-metro/indust-dictionary.csv")#
fips <-  read.csv("../../data/gdp-metro/fips-dictionary.csv")#
#
selected <- merge(selected, indust, by = "indust")#
selected <- merge(selected, fips, by = "fips")#
#
# Make industry and city labels small enough to plot#
selected$industry <- abbreviate(selected$Industry, 8)#
selected$Industry <- NULL#
#
selected$metro <- str_replace(selected$Metropolitan.Area, " \\(MSA\\)", "")#
selected$metro <- abbreviate(selected$metro, 15)#
selected$Metropolitan.Area <- NULL#
#
selected <- selected[!is.na(selected$gdp), ]
library(stringr)
indust <- read.csv("../../data/gdp-metro/indust-dictionary.csv")#
fips <-  read.csv("../../data/gdp-metro/fips-dictionary.csv")#
#
selected <- merge(selected, indust, by = "indust")#
selected <- merge(selected, fips, by = "fips")#
#
# Make industry and city labels small enough to plot#
selected$industry <- abbreviate(selected$Industry, 8)#
selected$Industry <- NULL#
#
selected$metro <- str_replace(selected$Metropolitan.Area, " \\(MSA\\)", "")#
selected$metro <- abbreviate(selected$metro, 15)#
selected$Metropolitan.Area <- NULL#
#
selected <- selected[!is.na(selected$gdp), ]
head(selected)
selected1 <-subset(gdp_hpi, rank<=10 | rank > 310)
top_indust <- subset(gdp, fips %in% c(35620, 31100,26420, 37980,38060, 41700, 41740, 19100, 41940, 19820, 26900, 27260, 41860, 18140, 12420, 32820, 12580) & indust %in% c(11, 3, 10, 12, 36, 45, 58, 63, 62, 66, 78, 67, 55, 12, 71, 50, 6, 74, 100, 104))
 gdp<- merge(top_indust, indust, by = "indust")
gdp <- merge(gdp, fips, by = "fips")
head(gdp)
gdp$industry <- abbreviate(gdp$Industry, 8)#
gdp$Industry <- NULL
gdp$metro <- str_replace(gdp$Metropolitan.Area, " \\(MSA\\)", "")#
gdp$metro <- abbreviate(gdp$metro, 15)#
gdp$Metropolitan.Area <- NULL
gdp <- gdp[!is.na(gdp$gdp), ]
head(gdp)
names(maximum_hpi)[1] <- "fips"
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")
head(gdp_hpi)
selected <-subset(gdp_hpi, rank<=10 | rank > 310)
head(selected)
pop <- read.csv("../../data/census-population/population-msa.csv")#
names(pop)[12] <- "fips"
withpop <- merge(gdp, pop[c("fips","year","popestimate")], #
  by = c("fips","year"))
withpop$index.gdp <- withpop$gdp / withpop$popestimate
head(withpop)
gdp_hpi <- merge(withpop, maximum_hpi, by="fips")
head(gdp_hpi)
gdp_hpi <- merge(withpop, maximum_hpi, by="fips")
selected <-subset(gdp_hpi, rank<=10 | rank > 310)
qplot(year, gdp, data = selected, colour = industry, geom="line", facets=~ metro, log = "y")
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")
selected <-subset(gdp_hpi, rank<=10 | rank > 310)
head(selected)
qplot(year, gdp, data = selected, colour = rank,  group = metro, geom="line", facets=~ metro, log = "y")
qplot(year, gdp, data = selected, colour = rank, geom="line", facets=~ metro, log = "y")
qplot(year, gdp, data = selected, colour = rank, geom="line", facets=~ metro, log = "y")
selected
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")
head(gdp_hpi)
gdp_hpi
top_indust <- subset(gdp, indust %in% c(11, 3, 10, 12, 36, 45, 58, 63, 62, 66, 78, 67, 55, 12, 71, 50, 6, 74, 100, 104))
gdp<- merge(top_indust, indust, by = "indust")#
gdp <- merge(gdp, fips, by = "fips")
gdp$industry <- abbreviate(gdp$Industry, 8)#
gdp$Industry <- NULL#
#
gdp$metro <- str_replace(gdp$Metropolitan.Area, " \\(MSA\\)", "")#
gdp$metro <- abbreviate(gdp$metro, 15)#
gdp$Metropolitan.Area <- NULL#
#
gdp <- gdp[!is.na(gdp$gdp), ]
names(maximum_hpi)[1] <- "fips" #
#
#
gdp_hpi <- merge(gdp, maximum_hpi, by="fips")#
#
selected <-subset(gdp_hpi, rank<=10 | rank > 310)
selected
gdp_hpi
