head(e)
colnames(e) <- c("name","email")
head(e)
write.csv(file.choose())
write.csv("new contacts.csv")
write.csv(e,"new contacts.csv")
?write.csv
write.csv(e,"new contacts.csv",row.names=FALSE)
?plot
?substr
#
file_names <- c(#
                paste(#
                  "tb3u",#
                  rep(c("00","01","02",as.character(2003:2008)),each = 12) ,#
                  c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"), #
                  ".txt",#
                  sep=""#
                ),#
                paste(#
                  "tb3u",#
                  "2009",#
                  c("01", "02", "03", "04"), #
                  ".txt",#
                  sep=""#
                )#
              )#
              #
file_names[substr(file_names,5,8) == "2003"][1:5] <- paste(#
                  "tb3u",#
                  "03",#
                  c("01", "02", "03", "04","05"), #
                  ".txt",#
                  sep=""#
                )
file_names
?substr
a <- 1:10
b <- c("A","B","C")
a
b
paste(a,b)
paste(a,b,sep="")
paste(a,b,sep="",collapse = "")
paste(a,b,sep="",collapse = "-")
source(file.choose(),chdir=T)
a <- "21      19       2       0       0       0      91"
a
instal.packages("R.oo")
install.packages("R.oo")
library(R.oo)
?R.oo
strsplit(a," ")
source(file.choose(),chdir=T)
num_vector(a)
read.csv(file.choose())
library(ggplot2)
read.csv(file.choose())
v <-read.csv(file.choose())
?subset
subset()
names(v)
subset(v, statefips==6 & countyfips== 47)
options(stringsAsFactors=FALSE)
time <- v[,"year"] + (hpi[,"quarter"]) / 4
time <- v[,"year"] + (v[,"quarter"]) / 4
v2 <- cbind(v,time)
qplot(x=time, y=total, data=v2)
merced<-subset(v, statefips==6 & countyfips== 47)
v2 <- cbind(merced,time)
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
merced2
merced<-subset(v, statefips==6 & countyfips== 47 & type=="all")
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
merced<-subset(v, statefips==6 & countyfips== 47)# & type=="all")#
#
#
time <- merced[,"year"] + (merced[,"quarter"]) / 4#
#
merced2 <- cbind(merced,time)#
#
qplot(x=time, y=total, data=merced2)
#
merced2
#
qplot(x=time, y=total, data=merced2)
hpi <- read.csv(file.choose())
nebraska <- subset(hpi, state=="NE")
nebraska
?pch
help(matrix)
help
library(ggplot)
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  #
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors)#
    out#
}#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics
 compute.bond.statistics = function(rates, times, cashflows)#
+ {#
+   discount.factors = exp( -1 * times * rates )#
+   bond.value       = sum(cashflows * discount.factors)#
+   duration         = sum(cashflows * discount.factors * times)    / bond.value#
+   #
+   out = list(bond.value = bond.value, duration = duration)#
+     out#
+ }#
> #
> term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
> term.structure.times = 1:12#
> #
> bond1.cash.flows = c(rep(6,11),106)#
> bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
> bond1.statistics
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  #
  out = list(bond.value = bond.value, duration = duration)#
    out#
}#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics
compute.bond.convexity = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(convexity = convexity, ytm = ytm)#
  out#
}
bond1.cash.flows = c(rep(6,11),106)#
bond1.convexity = compute.bond.convexity(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.convexity
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100
term.structure.times2= 1:5
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100#
#
term.structure.times2= 1:5#
#
bond2.cash.flows = c(rep(10,4),110)#
>#
 bond1.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)
#
bond2.cash.flows = c(rep(10,4),110)
 bond2.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)
 bond2.statistics
term.structure.rates2 = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75)/100#
#
term.structure.times2= 1:5#
#
bond2.cash.flows = c(rep(10,4),110)#
>#
 bond2.statistics = compute.bond.statistics(term.structure.rates2, term.structure.times2,bond2.cash.flows)#
 bond2.statistics
bond2.convexity = compute.bond.convexity(term.structure.rates2, term.structure.times2,bond2.cash.flows)#
bond2.convexity
> term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100
term.structure.rates.shift
term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100
 bond1.statistics = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
bond1.statistics
bond1.convexity = compute.bond.convexity(term.structure.rates.shift, term.structure.times,bond1.cash.flows)#
 #
bond1.convexity
term.structure.rates2.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75)/100
bond2.statistics = compute.bond.statistics(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)#
bond2.statistics
#
bond2.convexity = compute.bond.convexity(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)#
bond2.convexity
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors, convexity = convexity, ytm = ytm)#
  out#
}#
#
#
#
##########################################################################################################################################################
##########################################################################################################################################################
##########################################################################################################################################################
#
#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
####
### Bond 1#
####
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics#
#
#
####
### Bond 2#
####
#
bond2.cash.flows = c(rep(10,4),110)#
bond2.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
bond2.statistics#
#
#
####
### obligation#
####
#
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics
B1 = bond1.statistics$bond.value#
D1 = bond1.statistics$duration#
#
B2 = bond2.statistics$bond.value#
D2 = bond2.statistics$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration#
#
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]#
x1#
x2
round(x2,0) * round(new.bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x2,0) * round(bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x2,0) * round(new.bond2.statistics$bond.value,2)#
#
#
new.obligation.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
new.obligation.statistics
round(x1,0) * round(bond1.statistics.shift$bond.value,2)
bond1.statistics.shift = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)#
> bond1.statistics.shift
round(x1,0) * round(bond1.statistics.shift$bond.value,2)
term.structure.rates.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75 , 9.16 , 9.52 , 9.85 , 10.15 , 10.42 , 10.67 , 10.89) / 100#
bond1.statistics.shift = compute.bond.statistics(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
bond1.convexity.shift = compute.bond.convexity(term.structure.rates.shift, term.structure.times,bond1.cash.flows)
term.structure.rates2.shift = c(6.67 , 7.27 , 7.81 , 8.31 , 8.75)/100#
bond2.statistics.shift = compute.bond.statistics(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)
bond2.convexity.shift = compute.bond.convexity(term.structure.rates2.shift, term.structure.times2,bond2.cash.flows)
B1 = bond1.statistics.shift$bond.value#
D1 = bond1.statistics.shift$duration
B2 = bond2.statistics.shift$bond.value#
D2 = bond2.statistics.shift$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]
x1
x2
compute.bond.statistics = function(rates, times, cashflows)#
{#
  discount.factors = exp( -1 * times * rates )#
  bond.value       = sum(cashflows * discount.factors)#
  duration         = sum(cashflows * discount.factors * times)    / bond.value#
  convexity        = sum(cashflows * discount.factors * times^2)  / bond.value#
  f                = function(ytm)  {    sum(exp( -1 * times * ytm ) * cashflows) -  bond.value  }#
  ytm              = uniroot(f, interval=c(0,1), tol = 1e-9)$root#
#
  out = list(bond.value = bond.value, duration = duration, discount.factors = discount.factors, convexity = convexity, ytm = ytm)#
  out#
}#
#
#
#
##########################################################################################################################################################
##########################################################################################################################################################
##########################################################################################################################################################
#
#
#
term.structure.rates = c(7.67 , 8.27 , 8.81 , 9.31 , 9.75 , 10.16 , 10.52 , 10.85 , 11.15 , 11.42 , 11.67 , 11.89) / 100#
term.structure.times = 1:12#
#
####
### Bond 1#
####
#
bond1.cash.flows = c(rep(6,11),106)#
bond1.statistics = compute.bond.statistics(term.structure.rates, term.structure.times,bond1.cash.flows)#
bond1.statistics#
#
#
####
### Bond 2#
####
#
bond2.cash.flows = c(rep(10,4),110)#
bond2.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
bond2.statistics#
#
#
####
### obligation#
####
#
obligation.cash.flows = c(0,0,0,0,1000000)#
obligation.statistics = compute.bond.statistics(term.structure.rates[1:5], term.structure.times[1:5],obligation.cash.flows)#
obligation.statistics#
#
####
### Solving for x1 and x2#
####
#
B1 = bond1.statistics$bond.value#
D1 = bond1.statistics$duration#
#
B2 = bond2.statistics$bond.value#
D2 = bond2.statistics$duration#
#
PV = obligation.statistics$bond.value#
DP = obligation.statistics$duration#
#
x = solve( matrix(c(B1, B2, B1 * D1, B2*D2),2,2,byrow=T), c(PV, PV * DP))#
x#
x1 = x[1]#
x2 = x[2]#
x1#
x2
new.term.structure.rates = term.structure.rates - 0.01#
#
new.bond1.statistics = compute.bond.statistics(new.term.structure.rates, term.structure.times,bond1.cash.flows)#
new.bond1.statistics#
#
round(x1,0) * round(new.bond1.statistics$bond.value,2)#
#
#
new.bond2.statistics = compute.bond.statistics(new.term.structure.rates[1:5], term.structure.times[1:5],bond2.cash.flows)#
new.bond2.statistics#
#
round(x2,0) * round(new.bond2.statistics$bond.value,2)
library(termstrc)
head(termstrc)
data(eurobonds)
eurobonds$HUNGARY
group      =  "HUNGARY"#
bonddata   =  eurobonds#
method     =  "Nelson/Siegel"#
fit        =  "prices"#
weights    =  "none"#
matrange   =  c(1,30)#
b          =  matrix(rep(c(0,0,0, 1),3),nrow=3,byrow=TRUE)#
#
x =  nelson_estim(group, bonddata, matrange, method, fit, weights, startparam=b)#
x#
plot(x,errors="none")
t(creat_cashflows_matrix)(eurobonds$HUNGARY, include_price=FALSE)
t(create_cashflows_matrix)(eurobonds$HUNGARY, include_price=FALSE)
t(create_cashflows_matrix(eurobonds$HUNGARY, include_price=FALSE))
hun = t(create_cashflows_matrix(eurobonds$HUNGARY, include_price=FALSE))
solve(hun)
install.packages(fOptions)
install.packages(foptions)
install.packages(fOptions)
library(foptions)
?fOptions
??fOptions
hi <- a + b
((.534)*(73.52)+(.466)(23.95))*exp(-.08*(1/3))
((.534)*(73.52)+(.466)*(23.95))*exp(-.08*(1/3))
((.534)*(23.95)+(.466)*(0))*exp(-.08*(1/3))
((.534)*(49.09)+(.466)*(12.45))*exp(-.08*(1/3))
((.534)*(12.45)+(.466)*(0))*exp(-.08*(1/3))
((.534)*(31.17)+(.466)*(6.47))*exp(-.08*(1/3))
((.534)*(0)+(.466)*(11.03))*exp(-.08*(1/3))
((.534)*(11.03)+(.466)*(35.73))*exp(-.08*(1/3))
((.534)*(0)+(.466)*(5.00))*exp(-.08*(1/3))
((.534)*(5.00)+(.466)*(21.95))*exp(-.08*(1/3))
((.534)*(2.27)+(.466)*(12.56))*exp(-.08*(1/3))
((.534)*(5.00)+(.466)*(24.44))*exp(-.08*(1/3))
((.534)*(2.26)+(.466)*(13.69))*exp(-.08*(1/3))
?pvalue
?pnorm
pnorm(-.0513)
pnorm(-.0513, mean= .105, sd= .3)
pnorm(-.0513, mean= .105, sd= .09)
pnorm(-.0513, mean= -.03, sd= .36)
generate.bm = function(n)#
{#
#
 z = rnorm(n)#
 w = cumsum(z)/sqrt(n)#
 w#
#
}
plot.bm.path = function(no.paths, n, drift=0, variance=1)#
{#
  x        = seq(0,1,length.out=n)#
  bm.paths = matrix(0, n, no.paths)#
  for (i in 1:no.paths)#
  {#
    bm.paths[,i] = x * drift + sqrt(variance)*generate.bm(n)#
  } #
  matplot(x, bm.paths, type="l", xlab="Time", ylab="Brownian Motion", main=paste(no.paths, " Path(s)"), col=1)#
}
n = 10000#
#
#
par(mfrow=c(2,2))#
#
plot.bm.path(1,n)
plot.bm.path(5,n)
par(mfrow=c(1,1))
first.variation.of.f     = numeric(length(index.set))#
quadratic.variation.of.f = numeric(length(index.set))
index.set = seq(from = 1000, to = 100000, by = 1000)#
index.set
first.variation.of.bm     = numeric(length(index.set))#
quadratic.variation.of.bm = numeric(length(index.set))
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2)#
}
plot(quadratic.variation.of.bm ~ index.set, main="Second Variation of BM", type="b", pch=19)
third.variation.of.f = numeric(length(index.set))
f = function(n)#
{#
  ti = seq(0,1,by=1/n)#
  x  = sin(100 * ti) * ti^2#
}#
#
for (i in 1:length(index.set))#
{#
  first.variation.of.f[i]     = sum(abs(diff(f(index.set[i]))))#
  quadratic.variation.of.f[i] = sum(diff(f(index.set[i]))^2)#
   quadratic.variation.of.f[i] = sum(diff(f(index.set[i]))^3)#
}
first.variation.of.f     = numeric(length(index.set))#
quadratic.variation.of.f = numeric(length(index.set))#
third.variation.of.f = numeric(length(index.set))
#
f = function(n)#
{#
  ti = seq(0,1,by=1/n)#
  x  = sin(100 * ti) * ti^2#
}#
#
for (i in 1:length(index.set))#
{#
  first.variation.of.f[i]     = sum(abs(diff(f(index.set[i]))))#
  quadratic.variation.of.f[i] = sum(diff(f(index.set[i]))^2)#
   quadratic.variation.of.f[i] = sum(diff(f(index.set[i]))^3)#
}
plot(third.variation.of.f ~ index.set, main="Thirds Variation of Function", type="b", pch=19)
library(tseries)
head(tseries)
mcdonalds.data = get.hist.quote(instrument="mcd", start="2005-01-01", quote="AdjClose")
?gethisquote
??gethistqupte
?get.hist.quote
??get.hist.quote
library(tseries)
mcdonalds.data = get.hist.quote(instrument="mcd", start="2005-01-01", quote="AdjClose")
plot(mcdonalds.data)
mcdonalds.returns = diff(log(mcdonalds.data))
x11()
plot(mcdonalds.returns)
x = as.numeric(mcdonalds.returns)
par(mfrow=c(1,1))
hist(x)
?hist
hist(x, breaks=10)
hist(x)
hist(x, breaks=10)
?binwidth
??binwidth
library(ggplot2)
qplot(x, data=x)
qplot(x, data=mcdonalds.returns)
hist(x)
qqnorm(x)
qqline(x)
acf(x, lag.max=15)
acf(x^2, lag.max=15)
acf(x, lag.max=15)
acf(x^2, lag.max=15)
generate.bm = function(n)#
{#
#
 z = rnorm(n)#
 w = cumsum(z)/sqrt(n)#
 w#
#
}#
#
####
### Function to generate brownian motion paths#
####
#
plot.bm.path = function(no.paths, n, drift=0, variance=1)#
{#
  x        = seq(0,1,length.out=n)#
  bm.paths = matrix(0, n, no.paths)#
  for (i in 1:no.paths)#
  {#
    bm.paths[,i] = x * drift + sqrt(variance)*generate.bm(n)#
  } #
  matplot(x, bm.paths, type="l", xlab="Time", ylab="Brownian Motion", main=paste(no.paths, " Path(s)"), col=1)#
}#
#
####
### some plots of standard Brownian Motion#
####
#
n = 10000#
#
#
par(mfrow=c(2,2))#
#
plot.bm.path(1,n)
#
plot.bm.path(20,n)#
plot.bm.path(100,n)
drift    = 0.02#
variance = 0.01*0.01#
#
no.paths  = 20#
gbm       = matrix(0, n, no.paths)#
#
for (i in 1:no.paths)#
{#
    gbm[,i]   = exp(x*drift + sqrt(variance)*generate.bm(n))#
} #
#
#
matplot(x, gbm, type="l", xlab="Time", main="Geometric BMs with drift 0.02, sd 0.01", col=1)
no.paths  = 10#
bm.standard   = matrix(0, n, no.paths)#
bm.with.drift = matrix(0, n, no.paths)#
#
drift    = 10#
variance = 4#
#
x  = seq(0,1,length.out=n)#
#
for (i in 1:no.paths)#
{#
    bm.standard[,i]   = generate.bm(n)#
    bm.with.drift[,i] = x * drift + sqrt(variance)*bm.standard[,i]#
} #
matplot(x, cbind(bm.standard,bm.with.drift), type="l", xlab="Time", main="Standard BM in Black, Red BM with drift 10, var 4", col=c(rep(1,no.paths), rep(2,no.paths)))#
#
#
drift    = -10#
variance = 0.25#
#
x  = seq(0,1,length.out=n)#
#
for (i in 1:no.paths)#
{#
    bm.standard[,i]   = generate.bm(n)#
    bm.with.drift[,i] = x * drift + sqrt(variance)*bm.standard[,i]#
} #
matplot(x, cbind(bm.standard,bm.with.drift), type="l", xlab="Time", main="Standard BM in Black, Red BM with drift -10, var 0.25", col=c(rep(1,no.paths), rep(2,no.paths)))
drift    = 0.02#
variance = 0.01*0.01#
#
no.paths  = 20#
gbm       = matrix(0, n, no.paths)#
#
for (i in 1:no.paths)#
{#
    gbm[,i]   = exp(x*drift + sqrt(variance)*generate.bm(n))#
} #
#
#
matplot(x, gbm, type="l", xlab="Time", main="Geometric BMs with drift 0.02, sd 0.01", col=1)
?pnorm
pnorm(4.55, mean=4.71, sd=.09)
pnorm(4.55, mean=4.71, sd=.3)
pnorm(-.0513, mean=..105, sd=.3)
pnorm(-.0513, mean=.105, sd=.3)
pnorm(-.0513, mean=.105, sd=.6)
pnorm(-.0513, mean=-.03, sd=.6)
generate.bm = function(n)#
{#
#
 z = rnorm(n)#
 w = cumsum(z)/sqrt(n)#
 w#
#
}#
#
####
### Function to generate brownian motion paths#
####
#
plot.bm.path = function(no.paths, n, drift=0, variance=1)#
{#
  x        = seq(0,1,length.out=n)#
  bm.paths = matrix(0, n, no.paths)#
  for (i in 1:no.paths)#
  {#
    bm.paths[,i] = x * drift + sqrt(variance)*generate.bm(n)#
  } #
  matplot(x, bm.paths, type="l", xlab="Time", ylab="Brownian Motion", main=paste(no.paths, " Path(s)"), col=1)#
}
n = 10000#
#
#
par(mfrow=c(2,2))#
#
plot.bm.path(1,n)
index.set = seq(from = 1000, to = 100000, by = 1000)#
index.set#
#
first.variation.of.bm     = numeric(length(index.set))#
quadratic.variation.of.bm = numeric(length(index.set))#
#
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2)#
}#
#
par(mfrow=c(1,2))#
plot(first.variation.of.bm     ~ index.set, main="First Variation of BM",  type="b", pch=19)#
plot(quadratic.variation.of.bm ~ index.set, main="Second Variation of BM", type="b", pch=19)#
par(mfrow=c(1,1))
#
index.set = seq(from = 1000, to = 100000, by = 1000)#
index.set#
#
first.variation.of.bm     = numeric(length(index.set))#
quadratic.variation.of.bm = numeric(length(index.set))#
third.variation.of.bm = numeric(length(index.set))#
#
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2#
  third.variation.of.bm[i] = sum(abs(diff(generate.bm(index.set[i])))^3)#
}#
#
par(mfrow=c(1,2))#
plot(first.variation.of.bm     ~ index.set, main="First Variation of BM",  type="b", pch=19)#
plot(quadratic.variation.of.bm ~ index.set, main="Second Variation of BM", type="b", pch=19)#
plot(third.variation.of.bm ~ index.set, main="Third Variation of BM", type="b", pch=19)#
par(mfrow=c(1,1))
index.set = seq(from = 1000, to = 100000, by = 1000)#
index.set#
#
first.variation.of.bm     = numeric(length(index.set))#
quadratic.variation.of.bm = numeric(length(index.set))#
third.variation.of.bm = numeric(length(index.set))
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2#
  third.variation.of.bm[i] = sum(abs(diff(generate.bm(index.set[i])))^3)#
}
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2#
  third.variation.of.bm[i] = sum(abs(diff(generate.bm(index.set[i])))^3)}
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2#
}
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2}
generate.bm = function(n)#
{#
#
 z = rnorm(n)#
 w = cumsum(z)/sqrt(n)#
 w#
#
}#
#
####
### Function to generate brownian motion paths#
####
#
plot.bm.path = function(no.paths, n, drift=0, variance=1)#
{#
  x        = seq(0,1,length.out=n)#
  bm.paths = matrix(0, n, no.paths)#
  for (i in 1:no.paths)#
  {#
    bm.paths[,i] = x * drift + sqrt(variance)*generate.bm(n)#
  } #
  matplot(x, bm.paths, type="l", xlab="Time", ylab="Brownian Motion", main=paste(no.paths, " Path(s)"), col=1)#
}#
#
####
### some plots of standard Brownian Motion#
####
#
n = 10000#
#
#
par(mfrow=c(2,2))
index.set = seq(from = 1000, to = 100000, by = 1000)#
index.set
first.variation.of.bm     = numeric(length(index.set))#
quadratic.variation.of.bm = numeric(length(index.set))#
third.variation.of.bm = numeric(length(index.set))
for (i in 1:length(index.set))#
{#
  first.variation.of.bm[i]     = sum(abs(diff(generate.bm(index.set[i]))))#
  quadratic.variation.of.bm[i] = sum(diff(generate.bm(index.set[i]))^2)#
  third.variation.of.bm[i] = sum(abs(diff(generate.bm(index.set[i])))^3)#
}
par(mfrow=c(1,2))#
plot(first.variation.of.bm     ~ index.set, main="First Variation of BM",  type="b", pch=19)#
plot(quadratic.variation.of.bm ~ index.set, main="Second Variation of BM", type="b", pch=19)#
plot(third.variation.of.bm ~ index.set, main="Third Variation of BM", type="b", pch=19)#
par(mfrow=c(1,1))
?par
par(mfrow=c(1,3))#
plot(first.variation.of.bm     ~ index.set, main="First Variation of BM",  type="b", pch=19)#
plot(quadratic.variation.of.bm ~ index.set, main="Second Variation of BM", type="b", pch=19)#
plot(third.variation.of.bm ~ index.set, main="Third Variation of BM", type="b", pch=19)#
par(mfrow=c(1,1))
(10,000-(100*70))*70 –(110,000-(1000*70)+(305,000-3000*70))
(10000-(100*70))*70 –(110000-(1000*70)+(305000-3000*70))
(10000-(100*70))70 –(110000-(1000*70)+(305000-3000*70))
(10000-(100*70))*70 –(110000-(1000*70)+(305000-3000*70))
(10000-(100*70))*70
210000-(110000-(1000*70)+(305000-3000*70))
[10,000-100(.5(50)+55)](50) – [10,000+10(10,000-100(.5(50)+55))]
(10000-100*(.5*(50)+55))*(50) – (10,000+10*(10,000-100*(.5*(50)+55)))
(10000-100*(.5*(50)+55))*(50)–(10,000+10*(10,000-100*(.5*(50)+55)))
(10000-100*(.5*(50)+55))*(50)
(10000-100*(.5*(50)+55))*(50)-(10,000+10*(10,000-100*(.5*(50)+55)))
library(ggplot2)#
library(stringr)#
library(plyr)
gdp<-read.csv("gdp-summary.csv")#
hpi <- read.csv("../../data/fhfa-house-price-index/fhfa-house-price-index-msa.csv")
hpi.select<-subset(hpi,quarter==4) #
#
#
hpi.select <- ddply(hpi.select, c("fips_msa"), transform, #
  hpi.delta = c(diff(hpi) / diff(year), NA) / hpi,#
  .progress = "text")#
#
hpi.gdp <- merge(gdp, hpi.select, #
	by.x=c("fips", "year"), by.y= c("fips_msa", "year"))
cons <- subset(hpi.gdp, indust == 11 & year < 2008)
big.delta <- subset(cons, abs(gdp.delta) > 0.5)#
#
cons.safe <- subset(cons, !(fips %in% big.delta$fips))
biggest <- ddply(cons.safe, c("metro", "fips"), summarise,#
	gdp.sd = sd(gdp.delta), #
	hpi.sd = sd(hpi.delta),#
	gdp.mean = exp(mean(log(1 + gdp.delta))),#
	hpi.mean = exp(mean(log(1 + hpi.delta))),#
	n = length(hpi.delta))
biggest <- subset(biggest, n == 7)#
qplot(gdp.mean, hpi.mean, data = biggest)
base <- ggplot(mapping = aes(hpi.delta, gdp.delta)) + #
  geom_vline(xintercept = 0, colour = "grey50") + #
  geom_hline(yintercept = 0, colour = "grey50") +#
  geom_path(colour = "grey50") +#
  geom_point(aes(colour = year)) + #
  facet_wrap(~ metro)
base %+% merge(cons.safe, subset(biggest, rank(hpi.mean) < 20))
big.drop <- subset(cons.safe, hpi.delta < -0.2 & year == 2007)$fips#
base %+% subset(cons.safe, fips %in% big.drop)
big.delta <- subset(cons, abs(gdp.delta) > 0.5)#
#
cons.safe <- subset(cons, !(fips %in% big.delta$fips))#
#
ggplot(cons.safe, aes(hpi.delta, gdp.delta)) +#
 geom_vline(xintercept = 0, colour = "grey50") + #
 geom_hline(yintercept = 0, colour = "grey50") +#
 geom_point(aes(colour= state)) + #
 facet_wrap(~ year, nrow = 2) + #
 coord_equal()
big.droppers <- subset(cons.safe, fips %in% big.drop)#
avg <- ddply(big.droppers, "year", summarise,#
	gdp.delta = mean(gdp.delta),#
	hpi.delta = mean(hpi.delta))
#
state_avgs <- ddply(cons.safe, c("state", "year"), summarise,#
	gdp.delta = mean(gdp.delta),#
	hpi.delta = mean(hpi.delta))#
state_avgs$state <- factor(state_avgs$state)#
state_avgs <- subset(state_avgs, str_length(state) == 2)#
#
ggplot(state_avgs, aes(gdp.delta, hpi.delta, group = state)) +#
  geom_vline(xintercept = 0, colour = "grey50") + #
  geom_hline(yintercept = 0, colour = "grey50") +#
  geom_path(colour = "grey50") +#
  geom_point(aes(colour = year)) + #
  facet_wrap(~ state)+ #
  coord_equal()
big.droppers <- subset(cons.safe, fips %in% big.drop)#
avg <- ddply(big.droppers, "year", summarise,#
	gdp.delta = mean(gdp.delta),#
	hpi.delta = mean(hpi.delta))#
#
ggplot(avg, aes(gdp.delta, hpi.delta)) +#
  geom_vline(xintercept = 0, colour = "grey50") + #
  geom_hline(yintercept = 0, colour = "grey50") +#
  geom_path(colour = "grey50") +#
  geom_point(aes(colour = year)) + #
  coord_equal()
library(ggplot2)#
#
gdp <- read.csv("gdp-summary.csv")#
#
# Add in population#
pop <- read.csv("../../data/census-population/population-msa.csv")#
names(pop)[12] <- "fips"#
#
gdp <- merge(gdp, pop[c("fips", "year", "popestimate")])
overall <- ddply(gdp, c("industry", "year"), summarise, #
  overall.prop = weighted.mean(gdp.prop, popestimate))
gdp <- merge(gdp, overall, by = c("industry", "year"))
hpi_peaks <- read.csv("hpi-peaks.csv") #
#
diversity <- ddply(subset(gdp, year == 2006), c("fips", "year"), summarise, #
  d1 = sum((gdp.prop - overall.prop)^2 / overall.prop),#
  d2 = sd(gdp.prop),#
  d3 = (1 - 1/19) - sum((gdp.prop - 1 / 19) ^ 2),#
  biggest.gdp = max(gdp.prop),#
  n.big = sum(gdp.prop > 0.1)#
)#
diversity <- merge(diversity, hpi_peaks, by = "fips")#
#
qplot(d1, data = diversity, binwidth = 0.1)#
qplot(log10(d1), data = diversity, binwidth = 0.1)
gdp <- read.csv("gdp-summary.csv")#
#
# Add in population#
pop <- read.csv("../../data/census-population/population-msa.csv")#
names(pop)[12] <- "fips"#
#
gdp <- merge(gdp, pop[c("fips", "year", "popestimate")])
overall <- ddply(gdp, c("industry", "year"), summarise, #
  overall.prop = weighted.mean(gdp.prop, popestimate))
gdp <- merge(gdp, overall, by = c("industry", "year"))
hpi_peaks <- read.csv("hpi-peaks.csv") #
#
diversity <- ddply(subset(gdp, year == 2006), c("fips", "year"), summarise, #
  d1 = sum((gdp.prop - overall.prop)^2 / overall.prop),#
  d2 = sd(gdp.prop),#
  d3 = (1 - 1/19) - sum((gdp.prop - 1 / 19) ^ 2),#
  biggest.gdp = max(gdp.prop),#
  n.big = sum(gdp.prop > 0.1)#
)
diversity <- merge(diversity, hpi_peaks, by = "fips")
qplot(d3, yearly_change, data = diversity)
