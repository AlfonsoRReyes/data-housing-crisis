?Ops.difftime
Ops.difftime
Ops.difftime(x,x)
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
is.POSIXt
is.POSIXt <- function(x) inherits(x, "POSIXt")
is.duration <- function(x) inherits(x, "duration")
#
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}#
#
#
as.duration <- function (x, ...) UseMethod("as.duration")#
#
as.duration.data.frame <- function(x, ...){#
	stopifnot(dim(x) == c(1,2))#
	x <- structure(x, class = c("duration", "data.frame"))#
	x#
}#
#
as.duration.difftime <- function(x, ...){#
	new_duration(0, as.numeric(x, units = "secs"))#
}#
#
as.duration.default <- function(x, ...){#
	warning("Numeric coerced to seconds")#
	new_duration(0,x)#
}#
#
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)	#
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)#
#
y <- years(1)#
m <- months(1)#
d <- days(1)#
#
#
is.duration <- function(x) inherits(x, "duration")#
is.POSIXt <- function(x) inherits(x, "POSIXt")#
#
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}	#
#
add_duration_to_date <- function(date, dur) {#
	second(date) <- second(date) + dur$seconds#
	month(date) <- month(date) + dur$months#
	date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
'+.Generic'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		.Generic <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
		'.Generic' <- '+'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		'.Generic' <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
rm('.Generic,)
'
>
rm('.Generic')
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
x + x
base::'+'(x,x)
rm('+.duration')
base::'+'(x,x)
?options
traceback()
recover()
options(error = recover)
1
c
list.files
list.files()
try
base::try
rm(try)
try
return <- function(x) x
?POSIXt
z <- Sys.time()
z$tz
str(z)
as.POSIXlt(z) -> y
y
y$tz
str(y)
list(y)
y$tzone
attr(y, "tzone")
tz <- function(x) {#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}
tz(y) <- "EST"
# Extract components from a date#
# -----------------------------------------------------------#
#
# Dates should first be converted to POSIXt with parse.r#
#
#' TITLE#
#' Sub Title#
#' (blank line)#
#' Paragraph explaining stuff#
#' (blank line) #
#' @param    #
#' @author#
#' @keywords#
#' @examples#
#' example1()#
#' example2()#
#example <- function()#
#
#' Second#
#'#
#' Extract seconds component of a POSIXt date object.#
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' second(Sys.time())#
second <- function(x) #
    as.POSIXlt(x)$sec#
#
#' Minute#
#'#
#' Extract minutes component of a POSIXt date object.#
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' hour(Sys.time())#
hour <- function(x) #
    as.POSIXlt(x)$hour#
#
#' Day of the Year#
#'#
#' Returns the day of the year of a POSIXt date #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @seealso \code{\link{wday}, \link{mday}}#
#' @examples#
#' date <- as.POSIXlt("2009-02-10")#
#' yday(date)  # 41#
yday <- function(x) #
    as.POSIXlt(x)$yday + 1#
#
#' Day of the Week#
#'#
#' Returns the day of the week of a POSIXt date. A weekday of 1 corresponds to Sunday. #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @seealso \code{\link{yday}, \link{mday}, \link{base::weekdays}}#
#' @examples#
#' date <- as.POSIXlt("2009-02-10") # a tuesday#
#' wday(date)  # 3#
wday <- function(x) #
    as.POSIXlt(x)$wday + 1#
#
#' Day of the Month#
#'#
#' Returns the day of the month of a POSIXt date #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @seealso \code{\link{wday}, \link{yday}}#
#' @examples#
#' date <- as.POSIXlt("2009-02-10")#
#' mday(date)  # 10#
mday <- function(x) #
    as.POSIXlt(x)$mday#
#
#' Week of the Year#
#'#
#' Returns the week number for the year of a POSIXt date. #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' date <- as.POSIXlt("2009-01-01")#
#' week(date)  # 1#
#' date <- as.POSIXlt("2009-12-25")#
#' week(date)  # 52#
week <- function(x) #
    yday(x) %/% 7 + 1#
#
#' Month#
#'#
#' Returns the month of a POSIXt date. #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' date <- as.POSIXlt("2009-01-01")#
#' month(date)  # 2#
month <- function(x) #
    as.POSIXlt(x)$mon + 1#
#
#' Year#
#'#
#' Returns the year of a POSIXt date. #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' date <- as.POSIXlt("2009-01-01")#
#' year(date)  # 2009#
year <- function(x) #
    as.POSIXlt(x)$year + 1900#
#
#
# Extract the first entry in the time zone vector.#
#
#' Time Zone#
#'#
#' Returns the time zone of a POSIXt date. #
#' #
#' @param x a POSIXt date object    #
#' @author Hadley Wickham \email{h.wickham@@gmail.com}, Garrett Grolemund \email{garrettgrolemund@@rice.edu}#
#' @keywords utilities, accessors#
#' @examples#
#' tz(Sys.time())#
tz <- function(x) {#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}#
#
am <- function(x) hour(x) < 12#
pm <- function(x) !am(x)#
#
#
#
# Set a component of the date to a specified value#
# --------------------------------------------------------------------------#
#
# To change a component to a given value, remove or add the difference in #
# seconds between the original time and the time with the desired value.#
#
# Fractional seconds are incuded in the seconds variable#
"second<-" <- function(x, value) as.POSIXlt(x) - (second(x) - value)#
"minute<-" <- function(x, value) as.POSIXlt(x) - (minute(x) - value) * 60#
"hour<-" <- function(x, value) as.POSIXlt(x) - (hour(x) - value) * 3600#
"yday<-" <- function(x, value) as.POSIXlt(x) - (yday(x) - value) * 3600 * 24#
"wday<-" <- function(x, value) as.POSIXlt(x) - (wday(x) - value) * 3600 * 24#
"mday<-" <- function(x, value) as.POSIXlt(x) - (mday(x) - value) * 3600 * 24#
"week<-" <- function(x, value) as.POSIXlt(x) - (week(x) - value) * 3600 * 24 * 7#
#
#
"month<-" <- function(x, value) {#
  # Seconds approach no longer applies: months are not of uniformly long#
  if(value - trunc(value) != 0) stop("Month must be an integer")#
  ISOdatetime(#
    year(x) + (value - 1) %/% 12,  # New month values > 12 also change the year#
    #
    # %% is the modulo operator in R#
    (value - 1) %% 12 + 1, #
    mday(x), #
    hour(x), #
    minute(x), #
    second(x), #
    tz(x))#
}#
#
"year<-" <- function(x, value) {#
  ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x))#
}#
"tz<-" <- function(x, value) {#
  ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x),#
    value)#
}#
#
# Modify a date and return changed value. A wrapper for the functions above. #
# ---------------------------------------------------------------------------#
#
# Object is the date we want to change.#
# ... is a list of the changes we wish to make. Names must be given.  Names must #
# be in the set (second, minute, hour, yday, wday, mday, week, month, year, #
# tz). #
# Perhaps we should add an error message to clarify this?#
update.Date <- update.POSIXt <- function(object, ...) {#
#
  # a list of the changes we wish to make#
  todo <- list(...)#
  #
  # ordering to do list#
  changes <- as.list(c(year = todo$year, #
    month = todo$month, #
    week = todo$week, #
    yday = todo$yday,#
    wday = todo$wday,#
    mday = todo$mday, #
    hour = todo$hour, #
    minute = todo$minute, #
    second = todo$second,#
    tz = todo$tz))  #
    #
  for(change in names(changes)) {#
#
    # for each change, we select the function we will need to use#
    f <- match.fun(paste(change, "<-", sep = ""))#
    #
    # we update the date with the new change#
    object <- f(object, changes[[change]])#
  }#
  object#
}#
#
decimal_date <- function(date){#
	if (!is.POSIXt(date))#
		stop("date not in POSIXt format")#
	just_year <- update.Date(date, month = 1, week = 1, yday = 1, hour = 1, minute = 1, second = 1)#
	if (leap.year(date))#
		decimal <- (date - just_year)/ 31622400#
	else#
		decimal <- (date - just_year)/ 31536000#
	year(date) + decimal$seconds#
}
tz(y) <- "EST"
traceback()
#' hour(Sys.time())#
minute <- function(x) #
    as.POSIXlt(x)$minute
tz(y) <- "EST"
attr(y, "tzone")
date <- as.POSIXlt("2009-02-10")
update.Date(date, year = 2010, month = 1, mday = 1)
traceback()
tz(date)
"tz<-"(date, NULL)
"tz<-"(date, NA)
?is.NULL
?is.na
is.na(NULL)
is.NULL
value <- NULL
value
str(value)
value == NULL
missing(value)
?NULL
is.null(value)
"tz<-" <- function(x, value) {#
    if (is.na(value) | is.null(value)#
        return(x)#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
"tz<-" <- function(x, value) {#
    if (is.na(value) | is.null(value))#
        return(x)#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
update.Date(date, year = 2010, month = 1, mday = 1)
"tz<-"(date, NULL)
"tz<-" <- function(x, value) {#
    if (is.na(value) || is.null(value))#
        return(x)#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
"tz<-"(date, NULL)
update.Date(date, year = 2010, month = 1, mday = 1)
traceback()
object <- date
update.Date <- update.POSIXt <- function(object, ...) {#
#
  # a list of the changes we wish to make#
  todo <- list(...)#
  todo#
 }
todo <- update.Date(date, year = 2010, month = 1, mday = 1)
todo
changes <- as.list(c(year = todo$year, #
    month = todo$month, #
    week = todo$week, #
    yday = todo$yday,#
    wday = todo$wday,#
    mday = todo$mday, #
    hour = todo$hour, #
    minute = todo$minute, #
    second = todo$second,#
    tz = todo$tz))
changes
match.fun(paste(year, "<-", sep = ""))
match.fun(paste("year", "<-", sep = ""))
match.fun(paste("month", "<-", sep = ""))
match.fun(paste("mday", "<-", sep = ""))
year(date, 1)
'year<-'(date, 1)
class(date)
minute(date)
tz(date0
tz(date)
second(date)
ISOdatetime(2010,  month(date), mday(date), hour(date), minute(date), second(date), "")
ISOdatetime(2010,  month(date), mday(date), 1, 1, second(date), "")
ISOdatetime(2010,  month(date), mday(date), 0, 0, second(date), "")
date$minute
date$sec
unclass(date)
minute <- function(x) #
    as.POSIXlt(x)$min
hour(date)
ISOdatetime(2010,  month(date), mday(date), hour(date), minute(date), second(date), "")
tz(date)
is.null(na)
is.null(NA)
"year<-" <- function(x, value) {#
    tzone <- tz(x)#
    if (is.na(tzone) || is.null(tzone)){#
        date <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")#
        attr(date, "tzone") <- NULL#
        date#
    else#
        ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x))#
}
"year<-" <- function(x, value) {#
    tzone <- tz(x)#
    if (is.na(tzone) || is.null(tzone)){#
        date <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")#
        attr(date, "tzone") <- NULL#
        date#
    } else#
        ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x))#
}
'year<-'(date, 2010)
"year<-" <- function(x, value) {#
    tzone <- tz(x)#
    if ( is.null(tzone)){#
        date <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")#
        attr(date, "tzone") <- NULL#
        date#
    } else if (is.na(tzone)){#
        date <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")#
        attr(date, "tzone") <- NULL#
        date#
    } else#
        ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x))#
}
'year<-'(date, 2010)
"tz<-" <- function(x, value) {#
    if (is.null(value))#
        return(x)#
     if (is.na(value))#
        return(x)#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
update.Date(date, year = 2010, month = 1, mday = 1)
update.Date(date, year = 2010, month = 1, mday = 1) -> this
class(this)
object
'year<-'(object, 2010)
date
date2 <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")
date2
x <- date
date2 <- ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), "")
date2
value
date2 <- ISOdatetime(2010,  month(x), mday(x), hour(x), minute(x), second(x), "")
date2
attr(date2, "tzone")
attr(date2, "tzone") <- NULL
attr(date2, "tzone")
date2
'month<-'(date, 1)
unclass(date2)
date2 <- as.POSIXLt(date2)
date2 <- as.POSIXlt(date2)
date2
attr(date2, "tzone") <- NULL
date2
class(date2)
"year<-" <- function(x, value) {#
    tzone <- tz(x)#
    if ( is.null(tzone)){#
        date <- as.POSIXlt(ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), ""))#
        attr(date, "tzone") <- NULL#
        date#
    } else if (is.na(tzone)){#
        date <- as.POSIXlt(ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), ""))#
        attr(date, "tzone") <- NULL#
        date#
    } else#
        ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x))#
}
'year<-'(object, 2010)
ISOdatetime(2010,  month(x), mday(x), hour(x), minute(x), second(x))
as.POSIXct('year<-'(object, 2010))
tz <- function(x, supply = F) {#
    if (supply){#
        if (is.null(attr(as.POSIXlt(x),"tzone")))#
            return("")#
        if (is.na(attr(as.POSIXlt(x),"tzone")))#
            return("")#
    }#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}
tz(date)
tz(date, supply = T)
tz(as.POSIXct(date))
tz(as.POSIXct(date2))
attr(date2, "tzone") <- "EST"
date2
class(date2)
tz(date2)
tz(date2, supply = T)
"tz<-" <- function(x, value) {#
    ISOdatetime(year(x),  month(x), mday(x), hour(x), minute(x), second(x), value)#
}
"year<-" <- function(x, value) {#
  ISOdatetime(value,  month(x), mday(x), hour(x), minute(x), second(x), tz(x, supply = T))#
}
"month<-" <- function(x, value) {#
  # Seconds approach no longer applies: months are not uniformly long#
#
  ISOdatetime(#
    year(x) + (value - 1) %/% 12,  # New month values > 12 also change the year#
    #
    # %% is the modulo operator in R#
    (value - 1) %% 12 + 1, #
    mday(x), #
    hour(x), #
    minute(x), #
    second(x), #
    tz(x, supply = T))#
}
update.Date(date, year = 2010, month = 1, mday = 1)
'year<-'(date, 2010)
update.Date(date, year = 2010, mday = 1)
update.Date(date, year = 2010)
update.Date <- update.POSIXt <- function(object, ...) {#
#
  # a list of the changes we wish to make#
  todo <- list(...)#
  #
  # ordering to do list#
  changes <- as.list(c(year = todo$year, #
    month = todo$month, #
    week = todo$week, #
    yday = todo$yday,#
    wday = todo$wday,#
    mday = todo$mday, #
    hour = todo$hour, #
    minute = todo$minute, #
    second = todo$second,#
    tz = todo$tz))  #
    #
  for(change in names(changes)) {#
#
    # for each change, we select the function we will need to use#
    f <- match.fun(paste(change, "<-", sep = ""))#
    #
    # we update the date with the new change#
    object <- f(object, changes[[change]])#
  }#
  object#
}
update.Date(date, year = 2010)
update.Date(date, year = 2010, month = 1, mday = 1)
traceback()
tz <- function(x, supply = F) {#
    if (supply){#
        if (is.null(attr(as.POSIXlt(x),"tzone")))#
            return("")#
        if (is.na(attr(as.POSIXlt(x),"tzone")[1]))#
            return("")#
    }#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}
update.Date(date, year = 2010, month = 1, mday = 1)
tz(date)
update.Date(date2, year = 2010, month = 1, mday = 1)
?na.rm
?sum
update.Date(date, year =2010, month = 13, mday = 1)
update.date(date, yday = 54, wday = 10, mday = 3)
update.Date(date, yday = 54, wday = 10, mday = 3)
daye
date
update.Date(date, yday = 35, wday = 10, mday = 3)
update.Date(date, min = 35 = 10, sec = 3)
update.Date(date, min = 10, sec = 3)
update.Date(date, minute = 10, second = 3)
decimal_date(date)
new_duration <- function (months, seconds){#
  structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}#
#
as.duration <- function (x, ...) UseMethod("as.duration")#
#
as.duration.data.frame <- function(x, ...) {#
  stopifnot(identical(sort(colnames(x)), c("months", "seconds")))#
  x <- structure(x, class = c("duration", "data.frame"))#
  x#
}#
#
as.duration.difftime <- function(x, ...){#
  new_duration(0, as.numeric(x, units = "secs"))#
}#
#
as.duration.default <- function(x, ...){#
  message("Numeric coerced to seconds")#
  new_duration(0,x)#
}#
as.duration.duration <- function(x, ...) {#
  x#
}#
#
as.data.frame.duration <- function(x, optional = TRUE, ...) {#
  stop("Currently, durations can not be stored in a data frame", #
    call. = FALSE)#
}#
#
#
c.duration <- function(...) {#
  structure(do.call(rbind, list(...)), class = c("duration", "data.frame"))#
}#
#
#
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)  #
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)#
#
y <- years(1)#
m <- months(1)#
w <- weeks(7)#
d <- days(1)#
#
#
is.duration <- function(x) inherits(x, "duration")#
is.POSIXt <- function(x) inherits(x, c("POSIXt", "POSIXct", "POSIXlt"))#
is.difftime <- function(x) inherits(x, "difftime")#
#
# for expanding arguments within operations#
#
get_length <- function(x) {#
	if(is.data.frame(x)) #
    	nrow(x)#
    else if (inherits(x, "POSIXlt"))#
    	length(x) / 9#
    else#
    	length(x)#
}#
  #
expand <- function(obj, sml, big){#
  if (big %% sml != 0) #
    stop("longer object length is not a multiple of shorter object length", call. = F)#
  seq <- rep(seq_len(sml), length = big)#
    #
  if (length(dim(obj)) == 2) {#
    obj[seq, , drop = FALSE]#
  } else {#
    obj[seq]#
  }#
    #
}#
#
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
  # accounting for different lengths#
  n1 <- get_length(e1)#
  n2 <- get_length(e2)#
#
  #
#
  if (n1 < n2)#
    e1 <- expand(e1, n1, n2)#
  else if (n1 > n2)#
    e2 <- expand(e2, n2, n1)#
  #
  if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
  if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
  if (is.duration(e1) && is.duration(e2)) #
    add_duration_to_duration(e1, e2)#
  else if (is.duration(e1) && is.POSIXt(e2))#
    add_duration_to_date(e2, e1)#
  else if (is.duration(e2) && is.POSIXt(e1)) #
    add_duration_to_date(e1, e2)#
  else if (is.POSIXt(e1) && is.POSIXt(e2))#
    stop("binary '+' is not defined for \"POSIXt\" objects")#
  else if (is.POSIXt(e1) || is.POSIXt(e2))#
    base::'+.POSIXt'(e1,e2)#
  else if (is.difftime(e1) && is.difftime(e2))#
    make_difftime(as.duration(e1) + as.duration(e2))#
  else if (is.difftime(e1)){#
    e2 <- structure(e2, units = units(e1), class = "difftime")#
    make_difftime(as.duration(e1) + e2)#
  }#
  else if (is.difftime(e2)){#
    e1 <- structure(e1, units = units(e2), class = "difftime")#
    make_difftime(as.duration(e2) + e1)#
  }#
  else #
    base::'+'(e1, e2)#
  #
}  #
#
add_duration_to_date <- function(date, dur) {#
  second(date) <- second(date) + dur$seconds#
  month(date) <- month(date) + dur$months#
  date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}#
#
make_difftime <- function (dur) {#
  if (dur$months != 0)#
    stop("difftime does not support non-uniform durations (months)")#
    #
  if (dur$seconds >= 0) seconds <- dur$seconds#
  else seconds <- -dur$seconds#
  #
    if (seconds < 60) #
        units <- "secs"#
    else if (seconds < 3600)#
        units <- "mins"#
    else if (seconds < 86400)#
        units <- "hours"#
    else units <- "days"#
    #
    switch(units, secs = structure(dur$seconds, units = "secs", class = "difftime"), #
    mins = structure(dur$seconds/60, units = "mins", class = "difftime"), #
    hours = structure(dur$seconds/3600, units = "hours", class = "difftime"), #
    days = structure(dur$seconds/86400, units = "days", class = "difftime"), #
    weeks = structure(dur$seconds/(7 * 86400), units = "weeks", class = "difftime"))#
}#
#
#
"*.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    multiply_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    multiply_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
# multiply_duration_by_numeric <- function(num, dur){#
#  as.duration(num * as.data.frame(dur))#
# }#
#
multiply_duration_by_numeric <- function(num, dur){#
  as.duration(num * structure(dur, class = "data.frame"))#
}#
#
"/.duration" <- function(e1, e2){#
    if (is.duration(e1) && is.duration(e2)) {#
    NA#
  } else if (is.duration(e1)){#
    divide_duration_by_numeric(e2, e1)#
  } else if (is.duration(e2)) {#
    divide_duration_by_numeric(e1, e2)#
  } else {#
    base::'*'(e1, e2)#
  }#
}  #
#
# divide_duration_by_numeric <- function(num, dur){#
#  as.duration(as.data.frame(dur)/num)#
# }#
divide_duration_by_numeric <- function(num, dur){#
  as.duration(structure(dur, class = "data.frame")/num)#
}#
#
#
# subtracting #
"-.duration" <- "-.POSIXt" <- "-.difftime" <- function(e1, e2){#
  # Deal with unary minus, e.g. -hours(1)#
  if (missing(e2) && is.duration(e1)) {#
    e1$seconds <- -e1$seconds#
    e1$months <-  -e1$months#
    return (e1)#
  }#
  if (missing(e2) && is.POSIXt(e1))#
    stop("unary '-' is not defined for \"POSIXt\" objects")#
  if (missing(e2) && is.difftime(e1))#
    return(make_difftime(-as.duration(e1)))#
  if (missing(e2)) #
  	return(base::'-'(e1))#
  #
  #
  # accounting for different lengths#
  n1 <- get_length(e1)#
  n2 <- get_length(e2)#
  if (n1 < n2)#
    e1 <- expand(e1, n1, n2)#
  else if (n1 > n2)#
    e2 <- expand(e2, n2, n1)#
  #
  # subtraction#
  if (!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
  if (!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
    if (is.duration(e1) && is.duration(e2))#
      e1 + -e2#
    else if (is.POSIXt(e1) && is.duration(e2))#
      e1 + -e2#
    else if (is.POSIXt(e1) && is.POSIXt(e2))#
      as.duration(difftime(e1, e2))    #
    else if (is.POSIXt(e2)) #
      stop("Can only subtract from POSIXt objects")#
    else if (is.POSIXt(e1) && is.difftime(e2))#
      e1 + -as.numeric(e2, units = "secs")#
    else if (is.POSIXt(e1))#
      structure(unclass(as.POSIXct(e1)) - e2, class = c("POSIXt", "POSIXct"))#
    else if (is.difftime(e1) || is.difftime(e2))#
      e1 + -e2#
    else#
      base::'-'(e1, e2)#
}#
#
#
# printing durations#
print.duration <- function(x) {#
  format_unit <- function(x, xsign, singular = NULL) {#
    if (is.null(singular)) singular <- deparse(substitute(x))#
    x <- x * sign(xsign)#
    plural <- paste(singular, "s", sep = "")#
    ifelse(x == 0, "", #
      paste(x, ifelse(!is.na(x) & x == 1, singular, plural)))#
  }#
#
  months <- abs(x$months)#
  seconds <- abs(x$seconds)#
#
  year <- months %/% 12#
  month <- months %% 12#
  #
  week <- (seconds %/% 604800)#
  day <- (seconds - week * 604800) %/% 86400#
  hour <- (seconds - week * 604800 - day * 86400) %/% 3600#
  minute <- (seconds - week * 604800 - day * 86400 - hour * 3600) %/% 60#
  second <- seconds - week * 604800 - day * 86400 - hour * 3600 - minute * 60#
  #
  duration <- cbind(#
    format_unit(year, x$month), #
    format_unit(month, x$month), #
    format_unit(week, x$seconds),#
    format_unit(day, x$seconds),#
    format_unit(hour, x$seconds), #
    format_unit(minute, x$seconds), #
    format_unit(second, x$seconds)#
  )#
  #
  collapse <- function(x) {#
    all <- x[x != ""]#
    if (length(all) == 0) return("0 seconds")#
    paste(all, collapse = ", ")#
  }#
  #
  print(paste(aaply(duration, 1, collapse)))#
}
decimal_date(date)
traceback()
#
leap.year <- function(year) {#
	if (is.POSIXt(year))#
		year <- year(year)#
  (year %% 4 == 0) & ((year %% 100 != 0) | (year %% 400 == 0))#
}
decimal_date(date)
all <- read.csv(gzfile("../../data/usps-vacancy/usps-vacancy.csv.gz"))
head(all)
qplot(year + quarter/4, vac + nostat, data = all, facets = ~ statefips, main = "Number of vacant addresses")
library(ggplot2)
qplot(year + quarter/4, vac + nostat, data = all, facets = ~ statefips, main = "Number of vacant addresses")
savePlot <- function(..., plot= TRUE, big = FALSE)#
{#
nameOfPlot <- substitute(...)#
nameOfPlot <- gsub("_", "-", nameOfPlot)#
cat("\nPrinting plot ", nameOfPlot,".pdf in folder 'exports'", sep ="")#
if(plot)#
if(big)#
ggsave(..., file=paste("exports/", nameOfPlot,"-BIG.pdf",sep = "", collapse = ""), width=20, height=15) #
else#
ggsave(..., file=paste("exports/", nameOfPlot,".pdf",sep = "", collapse = ""), width=8, height=6)#
else#
cat("\nJust Kidding!!!\n")#
cat("\n")#
}
vacancy_by_state <- qplot(year + quarter/4, vac + nostat, data = all, facets = ~ statefips, main = "Number of vacant addresses")
vacancy_by_state
savePlot(vacancy_by_state, big = T)
savePlot <- function(..., plot= TRUE, big = FALSE)#
{#
nameOfPlot <- substitute(...)#
nameOfPlot <- gsub("_", "-", nameOfPlot)#
cat("\nPrinting plot ", nameOfPlot,".pdf in folder 'exports'", sep ="")#
if(plot)#
if(big)#
ggsave(..., file=paste("exports/", nameOfPlot,"-BIG.pdf",sep = "", collapse = ""), width=20, height=15) #
else#
ggsave(..., file=paste("exports/", nameOfPlot,".pdf",sep = "", collapse = ""), width=8, height=6)#
else#
cat("\nJust Kidding!!!\n")#
cat("\n")#
}
savePlot(vacancy_by_state, big = T)
savePlot(vacancy_by_state, big = T)
qplot(year + quarter/4, vac + nostat, data = all[statefips ==6,], facets = ~ statefips, main = "Number of vacant addresses")
qplot(year + quarter/4, vac + nostat, data = all[all$statefips ==6,], facets = ~ statefips, main = "Number of vacant addresses")
all[all$vac + all$nostat >= 200000,]
qplot(year + quarter/4, (vac + nostat)/total, data = all, facets = ~ statefips, main = "Number of vacant addresses")
all[(all$vac + all$nostat)/all$total == 1,]
per_vacancy_by_state <- qplot(year + quarter/4, (vac + nostat)/total, data = all, facets = ~ statefips, main = "Number of vacant addresses")#
per_vacancy_by_state#
savePlot(per_vacancy_by_state, big = T)
per_vacancy_by_state <- qplot(year + quarter/4, (vac + nostat)/total, data = all, facets = ~ statefips, main = "Percent of addresses vacant")#
per_vacancy_by_state#
savePlot(per_vacancy_by_state, big = T)
florida <- all[all$statefips == 12,]
index <- function(x) x / x[1]
florida_all <- ddply(florida, .(countyfips), transform, vac_ind = index(vac))
florida_all <- ddply(florida_all, .(countyfips), transform, nostat_ind = index(nostat))
qplot(year + quarter/4, vac, data = florida, geom = "line", colour=countyfips, main = "Vacancies in Florida Counties")
#_______________________________________________________________#
qplot(year + quarter/4, vac, data = florida, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, vac_ind, data = florida_all, geom = "line", colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, vac_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
savePlot(FL_indexed)
FL_indexed <- qplot(year + quarter/4, vac_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")#
FL_indexed#
savePlot(FL_indexed)
qplot(year + quarter/4, vac, data = florida, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, vac_days, data = florida, geom = "line", colour=countyfips, main = "Total addresses in Florida Counties")
qplot(year + quarter/4, vac_days, data = florida, geom = "line", group = countyfips, colour=countyfips, main = "Total addresses in Florida Counties")
5 * 10^6
2.5 * 10^7 - 5 * 10^6
2000000
qplot(year + quarter/4, total, data = florida, geom = "line", group=countyfips, main = "Total addresses in Florida Counties")
qplot(year + quarter/4, nostat_ind, data = florida_all, geom = "line", colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, nostat_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, nostat, data = florida_all, geom = "line", colour=countyfips, main = "Vacancies in Florida Counties")
qplot(year + quarter/4, nostat, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
head(florida)
florida$tot_vac <- florida$vac + florida$nostat
head(florida_all)
florida_all$tot_vac <- with(florida_all, vac + nostat)
head(florida_all)
florida_all <- ddply(florida, .(countyfips), transform, tot_ind = index(total))
florida_all <- ddply(florida, .(countyfips), transform, tot_vac_ind = index(tot_vac))
qplot(year + quarter/4, tot_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Total addresses in Florida Counties")
head(florida_all)
florida_all <- ddply(florida, .(countyfips), transform, tot_ind = index(total))
head(florida_all)
qplot(year + quarter/4, tot_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Total addresses in Florida Counties")
qplot(year + quarter/4, tot_vac_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies and nostats in Florida Counties")
florida_all <- ddply(florida, .(countyfips), transform, tot_vac_ind = index(tot_vac))
head(florida_all)
qplot(year + quarter/4, tot_vac_ind, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies and nostats in Florida Counties")
qplot(year + quarter/4, tot_vac, data = florida_all, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies and nostats in Florida Counties")
qplot(year + quarter/4, vac/total, data = florida, geom = "line", group = countyfips, colour=countyfips, main = "Vacancies in Florida Counties")
