strptime(2009-06-14, "%Y - %m - %d")
strptime(2009-06-14, "%y - %m - %d")
?strptime
strptime(2009-06-14, "%y-%m-%d")
strptime(2009-06-14, "%Y-%m-%d")
strptime("2009-06-14", "%Y-%m-%d")
strptime("2009-06-14", "%Y-%m-%d") + months(2.5) + years(1.1)
?strptime
new_duration <- function (seconds, months){#
	structure(data.frame(seconds, months), class = "duration")#
}
a <- new_duration(1, 86461)
a
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}
a <- new_duration(1, 86461)
a
z <- Sys.time()
z + a
"+.POSIXt"
get("+.POSIXt")
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = "duration")#
}
b <- new_duration(1, 86461)
z + b
unclass(z)
unclass(b)
unclass(z) + unclass(b)
source("/Users/Garrett/Documents/git/lubridate/R/duration.R")
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = "data.frame")#
}
c <- new_duration(1, 86461)
z + c
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
get("+.POSIXt")
e2 <- a
inherits(e2, "data.frame")
?inherits
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("data.frame","duration"))#
}
d <- new_duration(1, 86461)
z + d
z + a
get("+")
.Primitive
get(.Primitive)
get(+)
get(".Primitive")
"month<-" <- function(x, value) {#
  # Seconds approach no longer applies: months are not of uniformly long#
  ISOdatetime(#
    year(x) + (value - 1) %/% 12,  # New month values > 12 also change the year#
    #
    # %% is the modulo operator in R#
    (value - 1) %% 12 + 1, #
    mday(x), #
    hour(x), #
    minute(x), #
    second(x), #
    tz(x))#
}
z + a
get(Ops.data.frame)
get("Ops.data.frame")
get(UseMethod)
get("UseMethod")
getS3method("UseMethod")
UseMethod
.+
>
get(.+)
get(".+")
getS3method(".+")
a + z
-1 * a
1 + a
a + 1
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
z + a
b
z + b
# Extract components from a date#
# -----------------------------------------------------------#
#
# Dates should first be converted to POSIXct with parse.r#
second <- function(x) as.POSIXlt(x)$sec#
minute <- function(x) as.POSIXlt(x)$min#
hour <- function(x) as.POSIXlt(x)$hour#
yday <- function(x) as.POSIXlt(x)$yday + 1#
wday <- function(x) as.POSIXlt(x)$wday + 1#
mday <- function(x) as.POSIXlt(x)$mday#
week <- function(x) yday(x) %/% 7 + 1#
month <- function(x) as.POSIXlt(x)$mon + 1#
year <- function(x) as.POSIXlt(x)$year + 1900#
#
#
# Extract the last entry in the time zone vector.#
#
# Note: Should this be the first entry? It appears that the last entry will #
# sometimes be the base timezone and sometimes the daylight savings alternate #
# time zone. On the otherhand, the first entry is often "".#
tz <- function(x) {#
  tzs <- attr(as.POSIXlt(x),"tzone")#
  tzs[1]#
}#
#
# time must first be converted ot military (24 hour) time#
am <- function(x) hour(x) < 12#
pm <- function(x) !am(x)#
#
#
#
# Set a component of the date to a specified value#
# --------------------------------------------------------------------------#
#
# To change a component to a given value, remove or add the difference in #
# seconds between the original time and the time with the desired value.#
#
# Fractional seconds are incuded in the seconds variable#
"second<-" <- function(x, value) as.POSIXlt(x) - (second(x) - value)#
"minute<-" <- function(x, value) as.POSIXlt(x) - (minute(x) - value) * 60#
"hour<-" <- function(x, value) as.POSIXlt(x) - (hour(x) - value) * 3600#
"yday<-" <- function(x, value) as.POSIXlt(x) - (yday(x) - value) * 3600 * 24#
"wday<-" <- function(x, value) as.POSIXlt(x) - (wday(x) - value) * 3600 * 24#
"mday<-" <- function(x, value) as.POSIXlt(x) - (mday(x) - value) * 3600 * 24#
"week<-" <- function(x, value) as.POSIXlt(x) - (week(x) - value) * 3600 * 24 * 7
z + b
z + a
"month<-" <- function (x, value){#
	a2 <- -(month(x) - value)#
	if (a2 == 0){#
		return(x)#
	} else if (a2 > 0){#
		month_seq <- seq(x, by = "month", length.out = a2 + 1)#
	} else { # adding negative months (subtracting)#
		a2 <- abs(a2)#
		month_seq <- seq(x, by = "-1 month", length.out = a2 + 1)#
	}#
	# partial months#
	secs <- as.double(difftime(month_seq[ceiling(a2) + 1], #
		month_seq[floor(a2) + 1], units = "secs"))#
	part <- a2 %% trunc(a2) * secs#
	#
	month_seq[a2 + 1] + part#
}
z + b
get("+.default")
get("+.Default")
get("+.generic")
get("+.Generic")
get("+.POSIXt")
get("+.numeric")
get("+.num")
get("+.difftime")
get("+")
get("*")
?setMethod
?signature
rm('+.POSIXt')
get('+.POSIXt')
setMethod('+', c("POSIXt", "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
z + a
z + b
setClass("duration",#
	representation(months = "numeric", seconds = "numeric"),#
)
setMethod('+', c("POSIXt", "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
z + a
setMethod('+', signature(z = "POSIXt", a = "duration"),#
	function(e1, e2){#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
	}#
)
>
z <- Sys.time()
class(z)
a <- new_duration(1, 86461)
a
class(a)
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}
class(a)
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		second(e1) <- second(e1) + e2$seconds#
		month(e1) <- month(e1) + e2$months#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
z + a
z
class(a)
a <- new_duration(1, 86461)
class(a)
-1 * a
"+.POSIXt" <- function(e1, e2){#
	if (inherits(e2, "duration")){#
		#
		e1#
		#
	} else {#
		base::'+.POSIXt'(e1, e2)#
	}#
}
z + a
?read.fwf
?strsplit
?trim
library(R.oo)
?trim
try <- "2     WHEN DID YOU SERVE?                     882 - 883"
strsplit(try, "  ")
trim(strsplit(try, "  "))
trim(strsplit(try, "  "))[[1]]
trim(strsplit(try, "  "))[1]
trim(strsplit(try, "  ")[1])
trim(strsplit(try, "  ")[[1]])
str(trim(strsplit(try, "  ")[[1]]))
trim(strsplit(try, "  ")[[1]])[1]
?is.na
library(xts)
install.package("xts")
install.packages("xts")
library(xts)
?xts
?classes(xts)
package?xts
package?zoo
library(zoo)
package?zoo
help(package = zoo)
help(package = xts)
?CLASS
CLASS
?xts
help(package = zoo)
library(its)
install.packages("its")
package?its
help(package = its)
?itsAccessor
?itsArith
?its
?itsTimes
library(ti)
install.packages("ti")
library(chron)
install.packages("chron")
library(chron)
package?chron
help(package = chron)
z <- Sys.time()
z
zz <- z + 60*60*20
zz
hour <- function(x) as.POSIXlt(x)$hour
am <- function(x) hour(x) < 12#
pm <- function(x) !am(x)
am(zz)
am(z)
zz <- z + 60*20
zz
am(zz)
hour(zz)
today <- Sys.Date
today
today()
today <- Sys.Date()
today
today + 2
z <- Sys.time()
zz <- z + 3600
zz
x <- zz - z
x
x + x
base::'+'(x, x)
base::'+.difftime'(x, x)
base::'+.POSIXt'(x, x)
class(x)
getMethods('+')
?MethodsList
findMethods('+')
showMethods('+')
getGenerics('+')
getGenerics(base::'+')
?Ops.difftime
Ops.difftime
Ops.difftime(x,x)
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
is.POSIXt
is.POSIXt <- function(x) inherits(x, "POSIXt")
is.duration <- function(x) inherits(x, "duration")
#
new_duration <- function (months, seconds){#
	structure(data.frame(months, seconds), class = c("duration", "data.frame"))#
}#
#
#
as.duration <- function (x, ...) UseMethod("as.duration")#
#
as.duration.data.frame <- function(x, ...){#
	stopifnot(dim(x) == c(1,2))#
	x <- structure(x, class = c("duration", "data.frame"))#
	x#
}#
#
as.duration.difftime <- function(x, ...){#
	new_duration(0, as.numeric(x, units = "secs"))#
}#
#
as.duration.default <- function(x, ...){#
	warning("Numeric coerced to seconds")#
	new_duration(0,x)#
}#
#
seconds <- function(x = 1) new_duration(0, x)#
minutes <- function(x = 1) seconds(x * 60)#
hours <-   function(x = 1) minutes(x * 60)#
days <-    function(x = 1) hours(x * 24)	#
weeks <-   function(x = 1) days(x * 7)#
months <-  function(x = 1) new_duration(x, 0)#
years <-   function(x = 1) months(x * 12)#
#
y <- years(1)#
m <- months(1)#
d <- days(1)#
#
#
is.duration <- function(x) inherits(x, "duration")#
is.POSIXt <- function(x) inherits(x, "POSIXt")#
#
# adding #
"+.duration" <- "+.POSIXt" <- "+.difftime" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}	#
#
add_duration_to_date <- function(date, dur) {#
	second(date) <- second(date) + dur$seconds#
	month(date) <- month(date) + dur$months#
	date#
}#
#
add_duration_to_duration <- function(dur1, dur2) {#
  dur1$seconds <- dur1$seconds + dur2$seconds#
  dur1$months <- dur1$months + dur2$months#
  dur1#
}
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else #
		base::'Ops.difftime'(e1, e2)#
}
x + x
'+.Generic'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		.Generic <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
		'.Generic' <- '+'
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		'.Generic' <- '+'#
		base::'Ops.difftime'(e1, e2)#
	}#
}
x + x
rm('.Generic,)
'
>
rm('.Generic')
x + x
"+.duration" <- "+.POSIXt" <- "+" <- function(e1, e2){#
	if(!is.POSIXt(e1) && is.duration(e2)) e1 <- as.duration(e1)#
	if(!is.POSIXt(e2) && is.duration(e1)) e2 <- as.duration(e2)#
	if (is.duration(e1) && is.duration(e2)) #
		add_duration_to_duration(e1, e2)#
	else if (is.duration(e1) && is.POSIXt(e2))#
		add_duration_to_date(e2, e1)#
	else if (is.duration(e2) && is.POSIXt(e1)) #
		add_duration_to_date(e1, e2)#
	else {#
		base::'+'(e1, e2)#
	}#
}
x + x
base::'+'(x,x)
rm('+.duration')
base::'+'(x,x)
library(ggplot2)#
source("explore-helper.r")
list <- subset(read.csv("texas-listings.csv"), year >= 2000 & msa != 800)#
list$date <- list$year + (list$month - 1) / 12
qplot(date, sales, data = list, geom = "line", group = msa)
list <- ddply(list, "msa", transform, #
  sales_ds = deseas(sales, month))#
qplot(date, sales_ds, data = list, geom = "line", group = msa)
list <- ddply(list, "msa", transform, #
  sales_ind = index(sales_ds))#
qplot(date, sales_ind, data = list, geom = "line", group = msa)
qplot(date, log10(sales_ds), data = list, geom = "line", group = msa)
list <- ddply(list, "msa", transform, #
  sales_sm = smooth(sales_ds, date))#
qplot(date, sales_sm, data = list, geom = "line", group = msa)
list <- ddply(list, "msa", transform, #
  sales_sm_ind = index(sales_sm))#
qplot(date, sales_sm_ind, data = list, geom = "line", group = msa)
names <- read.csv("msa-names.csv")#
list <- merge(list, names, by = "msa")#
#
qplot(date, sales_sm_ind, data = list, geom = "line") + facet_wrap(~ city)
qplot(date, sales, data = list, geom = "line") + facet_wrap(~ city)
hlist <- subset(read.csv("texas-listings.csv"), msa == 280 & year >= 2000)#
hlist$date <- hlist$year + (hlist$month - 1) / 12#
#
# Strong seasonal effects make it difficult to see long term trend#
qplot(date, price_avg, data = hlist, geom = "line")
qplot(date, listings, data = hlist, geom = "line")
qplot(date, sales, data = hlist, geom = "line")
qplot(date, sales / listings, data = hlist, geom = "line")
qplot(date, inventory, data = hlist, geom = "line")
hlist <- transform(hlist,
  sales_ds = deseas(sales, month),
  listings_ds = deseas(listings, month),#
  inventory_ds = deseas(inventory, month),#
  price_avg_ds = deseas(price_avg, month)#
)
qplot(month, sales, data = hlist, geom = "line", group = year)
qplot(month, sales_ds, data = hlist, geom = "line", group = year)
qplot(date, price_avg_ds, data = hlist, geom = "line")
qplot(date, sales_ds, data = hlist, geom = "line")
qplot(date, listings_ds, data = hlist, geom = "line")
qplot(date, sales_ds / listings_ds, data = hlist, geom = "line")
qplot(date, inventory_ds, data = hlist, geom = "line")
qplot(sales, price_avg, data = hlist)
qplot(sales_ds, price_avg_ds, data = hlist)
hdist <- subset(read.csv("texas-price-dist.csv"), msa == 280 & year >= 2000)#
#
qplot(price_rng, value, data = hdist, geom = "line") + facet_wrap(~ year)
qplot(year, value, data = hdist, geom = "line") + facet_wrap(~ price_rng)
qplot(date, log10(sales_ds), data = list, geom = "line", group = msa)
qplot(date, sales_sm_ind, data = list, geom = "line", group = msa)
qplot(date, sales_sm, data = list, geom = "line", group = msa)
qplot(date, sales_ds, data = list, geom = "line", group = msa)
qplot(date, sales_ind, data = list, geom = "line", group = msa)
qplot(date, sales_ind, data = list, geom = "line", group = msa, ylab = "Number of sales")
qplot(date, sales_sm_ind, data = list, geom = "line", group = msa, ylab = "Number of sales")
